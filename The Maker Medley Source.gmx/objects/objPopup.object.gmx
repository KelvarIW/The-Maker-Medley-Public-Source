<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerSettingsX</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10051</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprMakerGUIButton</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>message = "";
image_speed = 0;
move = 1;
ltgray = make_color_rgb(163, 173, 196);
buttonSelected = 0;
buttonClicked = 0;
buttonSelectedPrev = 0;
index = 0;
alarm[0] = 1;
resetControls = true;
closeButtonX = 607;
closeButtonY = -73;
closeButtonW = sprite_get_width(sprMakerSettingsX);
closeButtonH = sprite_get_height(sprMakerSettingsX);

// ensure we start at y=-80
y = -80;
ystart = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (object_index){
    if (index == other.index &amp;&amp; id != other){
        move = 1;
        with (object_index){
            if (id != other){  // other  -&gt;  one which is now moving down
                instance_destroy();
            }
        }
        break;
    }
}


switch(index){
    case 0:
        message = "Quit the game?";
        break;
    case 1:
        message = "Reset keyboard controls?";
        break;
    case 2:
        message = "Reset gamepad controls?";
        break;
    case 3:
        message = "Delete your save?";
        break;
    case 4:
        message = "Save invalid!#Check the program directory.";
        break;
    case 5: //no extension, but all failsafe data found
        message = "Unable to access program directory!#If the loaded data is incorrect,#please copy the data in the program directory#to the game's Local AppData folder.";
        break
    case 5.1: //no extension or failsafe save data
        message = "Unable to access program directory!#No save data located in Local Appdata folder.#If you have save data in the program directory,#please copy it to the game's Local AppData folder.";
        break;
    case 5.2: //no extension or failsafe config data
        message = "Unable to access program directory!#No config file located in Local Appdata folder.#If you have a config file in the program directory,#please copy it to the game's Local AppData folder.";
        break;
    case 5.3: //no extension or failsafe data
        message = "Unable to access program directory!#No data located in Local Appdata folder.#If you have save/config data in the program directory,#please copy it to the game's Local AppData folder.";
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (move != 0){
    y += move*clamp(2*(304-y)/5, 2.5, 48);
    if (move == 1 &amp;&amp; y &gt;= 304){
        y = 304;
        move = 0;
    }
    if (move == -1 &amp;&amp; y &lt;= ystart){
        instance_destroy();
    }
}

if (keyboard_check_pressed(vk_escape) &amp;&amp; index != 0){
    move = -1;
}else{
    //Clicking
    buttonSelectedPrev = buttonSelected;
    buttonSelected = 0;
    if (index != 4 &amp; floor(index) != 5){
        if (place_meeting(view_xview + 280, view_yview + y + 44, objMouseClickCheck) || place_meeting(view_xview+520, view_yview + y + 44, objMouseClickCheck))
            buttonSelected = sign(mouse_x - (view_xview + 400));
    }else{
        if (place_meeting(view_xview + 400, view_yview + y + 44, objMouseClickCheck))
            buttonSelected = -1;
    }
    if (buttonSelected != 0){
        if (buttonSelectedPrev != buttonSelected)
            audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
        if (mouse_check_button_pressed(mb_left) &amp;&amp; buttonClicked != buttonSelected){
            buttonClicked = buttonSelected;
            audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
        }
        
        if (mouse_check_button_released(mb_left) &amp;&amp; buttonClicked == buttonSelected){
            if (buttonClicked == -1){ //"Yes"
                switch(index){
                    case 0: //Quit
                        game_end();
                        break;
                    case 1: //Reset Controls
                    case 2:
                        with (objSettingsMenu){
                            resetControls = true;
                        }
                        break;
                    case 3: //Delete Save
                        var _ind = global.savenum;
                        scrWipeSaveFile(global.savenum);
                        var t_currentMusic = global.currentMusic;
                        
                        scrInitializeGlobals();
                        global.savenum = _ind;
                        
                        global.currentMusic = t_currentMusic;
                        scrSaveGame(false);
                        with (objLoadGameMenu){
                            event_perform(ev_create, 0); //refresh the menu
                        }
                        break;
                    case 4:
                        if (global.fmns){
                            if (file_exists_fmns(global.savePath + string(global.savenum))){
                                file_rename_fmns(global.savePath + string(global.savenum), global.saveInvalidPath + string(global.savenum));
                            }
                            //if the save is invalid, wipe the failsafe and backups as well (but not the invalid file)
                            scrWipeSaveFile(global.savenum, true);
                        }else{
                            if (file_exists(global.saveWorkingPath + string(global.savenum))){
                                file_rename(global.saveWorkingPath + string(global.savenum), global.saveFailsafeBackupInvalidPath + string(global.savenum));
                            }
                            scrWipeSaveFile(global.savenum, true);
                        }
                        break;
                }
            }
            move = -1;
            buttonClicked = 0;
            audio_play_sound_nogroup(sndMakerMenuRelease, 0, 0);
        }
    }
    
    //"X" Button
    if (mouse_x &gt;= view_xview + closeButtonX &amp;&amp; mouse_x &lt; view_xview + (closeButtonX+closeButtonW) &amp;&amp; mouse_y &gt;= view_yview + y + closeButtonY &amp;&amp; mouse_y &lt; view_yview + y + (closeButtonY+closeButtonH)){
        if (buttonSelected != 2){
            buttonSelected = 2;
            if (buttonSelectedPrev != buttonSelected)
                audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
        }
        if (mouse_check_button_pressed(mb_left)){
            buttonClicked = 2;
        }
        
        if (mouse_check_button_released(mb_left) &amp;&amp; buttonClicked == buttonSelected){
            buttonClicked = 0;
            audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuRelease, 0, 0), 0.9);
            move = -1;
        }
    }
    
    if (!mouse_check_button(mb_left)){
        buttonClicked = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(ltgray);
draw_rectangle(view_xview + 160, view_yview + y - 80, view_xview + 639, view_yview + y+79, false);
draw_set_color(c_white);

//Border
draw_sprite_ext(sprMakerSettingsBorder, 0, view_xview + 168, view_yview + y - 80, 58, 1, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorder, 0, view_xview + 168, view_yview + y + 80, 58, -1, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorder, 1, view_xview + 160, view_yview + y - 72, 1, 18, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorder, 1, view_xview + 640, view_yview + y - 72, -1, 18, 0, c_white, 1);
//Corners
draw_sprite(sprMakerSettingsBorder, 2, view_xview + 160, view_yview + y - 80);
draw_sprite_ext(sprMakerSettingsBorder, 2, view_xview + 160, view_yview + y + 80, 1, 1, 90, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorder, 2, view_xview + 640, view_yview + y + 80, 1, 1, 180, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorder, 2, view_xview + 640, view_yview + y - 80, 1, 1, 270, c_white, 1);
//Around "X" (read from top left to bottom right)
draw_sprite_ext(sprMakerSettingsBorderThin, 3, view_xview + (closeButtonX-6), view_yview + y + (closeButtonY-7), 1, 1, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorderThin, 1, view_xview + (closeButtonX-6), view_yview + y + (closeButtonY), 1, closeButtonH/8, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorderThin, 2, view_xview + (closeButtonX-5), view_yview + y + (closeButtonY + (closeButtonH-3)), 1, 1, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorderThin, 0, view_xview + (closeButtonX), view_yview + y + (closeButtonY + (closeButtonH-2)), closeButtonW/8, 1, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorderThin, 4, view_xview + (closeButtonX + (closeButtonW-1)), view_yview + y + (closeButtonY + (closeButtonH-2)), 1, 1, 0, c_white, 1);

//Buttons
var t_buttonLInd, t_buttonRInd, t_buttonXInd;
if (buttonSelected == -1){
    if (buttonClicked == -1)
        t_buttonLInd = 2;
    else
        t_buttonLInd = 1;
}else{
    t_buttonLInd = 0;
}
if (buttonSelected == 1){
    if (buttonClicked == 1)
        t_buttonRInd = 2;
    else
        t_buttonRInd = 1;
}else{
    t_buttonRInd = 0;
}
if (buttonSelected == 2){
    if (buttonClicked == 2)
        t_buttonXInd = 2;
    else
        t_buttonXInd = 1;
}else{
    t_buttonXInd = 0;
}

if (index != 4 &amp;&amp; floor(index) != 5){
    draw_sprite(sprMakerGUIButton, t_buttonLInd, view_xview + 280, view_yview + y + 44);
    draw_sprite(sprMakerMenuTextSmall, 2, view_xview + 280, view_yview + y + 44);
    draw_sprite(sprMakerGUIButton, t_buttonRInd, view_xview + 520, view_yview + y + 44);
    draw_sprite(sprMakerMenuTextSmall, 3, view_xview + 520, view_yview + y + 44);
}else{
    draw_sprite(sprMakerGUIButton, t_buttonLInd, view_xview + 400, view_yview + y + 44);
    draw_sprite(sprMakerMenuTextSmall, 4, view_xview + 400, view_yview + y + 44);
}
draw_sprite(sprMakerSettingsX, t_buttonXInd, view_xview + closeButtonX, view_yview + y + closeButtonY);

draw_set_font(fDefault12);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
scrDrawTextOutline(view_xview + 400, view_yview + y - 20, message, c_white, c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
