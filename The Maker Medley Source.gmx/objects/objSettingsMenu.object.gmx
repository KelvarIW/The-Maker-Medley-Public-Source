<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-10002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// All drawing is based on these
anchorX = view_xview;
anchorY = (view_yview + y);

// Menu dimensions
tabNum = 4;
tabWidth = sprite_get_width(sprMakerSettingsTab);
tabHeight = sprite_get_height(sprMakerSettingsTab);
menuWidth = ((tabNum*tabWidth) + sprite_get_width(sprMakerSettingsX));
rowHeight = 28;
rowTotal = 17;
menuHeight = (rowTotal*rowHeight);
// Menu coordinates
menuLeft   = (anchorX + roundSane((800-menuWidth)/2));
menuTop    = (anchorY + 66);
menuRight  = (menuLeft + menuWidth);
menuBottom = (menuTop + menuHeight);

// Tab values
tabName[3] = "Graphics";
tabName[2] = "Controller";
tabName[1] = "Keyboard";
tabName[0] = "General";
tabTopY = 33;
// Close button
selectedX = false;
clickedX = false;
closeButtonX = (menuLeft + (tabNum*tabWidth));

// Shared measurements
labelTextX = (anchorX + 58);
optionTextX = (anchorX + 570);

// Slider measurements  ("General" menu)
sliderW = 200;
sliderH = 20;
sliderX = (optionTextX - ceil(sliderW/2));
sliderY = -999; //overwritten in end step ///(menuTop + (rowHeight/2) - ceil(sliderH/2));
sliderSelected = -1;

// Number of setting rows on each page (for toggling settings)
rows[3] = 6;
rows[2] = 10;
rows[1] = 9;
rows[0] = 10;  // 10 w/ showDefaultBuffed  (EDIT: which is always shown)

showDefaultBuffed = global.gameClearedEver;
/*if (showDefaultBuffed){
    rows[0] ++;  // always show this option
}*/

lblue = make_color_rgb(114, 129, 164);
blue = make_color_rgb(103, 116, 148);
dblue = make_color_rgb(73, 74, 120);
move = -1;
menu = 0;
selectedMenu = -1;
selectedMenuPrev = -1;
menuOptions = 10;
selectedRow = -1;
selectedRowPrev = -1;
//text arrays
label[3, 9] = "";
for(var i=menuOptions-1;i&gt;=0;i--){
    for(j=3;j&gt;=0;j--){
        label[j, i] = "";
    }
    option[0, i] = 0;
    option[1, i] = "";
    option[2, i] = "";
    option[3, i] = 0;
}
        
option[3, 9] = 0;

// General
label[0, 0] = "Music Enabled";
label[0, 1] = "SFX Enabled";
label[0, 2] = "Main Volume";
label[0, 3] = "Music Volume";
label[0, 4] = "SFX Volume";
label[0, 5] = "Walljumps";
label[0, 6] = "Automatic Restart";
label[0, 7] = "Checkpoints in Previous Areas";
label[0, 8] = "Shields in Previous Areas";
label[0, 9] = "Cutscenes start Buffed Fights";
//label[0, 7] = "Identifiers";
//label[0, 8] = "Dialogue";

option[0, 0] = global.muteMusic;
option[0, 0] = global.muteSFX;
option[0, 2] = -4;
option[0, 3] = -4;
option[0, 4] = -4;
option[0, 5] = global.vineMode; //1 = Combined; 2 = Arrows + Hold Jump; 3 = Press Jump
option[0, 6] = global.autoRestart;
option[0, 7] = global.refightAutosave;
option[0, 8] = global.refightShields;
option[0, 9] = global.defaultBuffed;
//option[0, 7] = global.dialogue;

sliderClicked = false;

// Keyboard
label[1, 0] = "Left Button";
label[1, 1] = "Right Button";
label[1, 2] = "Up Button";
label[1, 3] = "Down Button";
label[1, 4] = "Jump Button";
label[1, 5] = "Shoot Button";
label[1, 6] = "Restart Button";
label[1, 7] = "Skip Button";
label[1, 8] = "Pause Button";
label[1, 9] = "";

settingControl = -1; //Keyboard or Controller
resetControls = false;
resetRow = 0;

// Controller
label[2, 0] = "Controller Index";
label[2, 1] = "Left Button";
label[2, 2] = "Right Button";
label[2, 3] = "Up Button";
label[2, 4] = "Down Button";
label[2, 5] = "Jump Button";
label[2, 6] = "Shoot Button";
label[2, 7] = "Restart Button";
label[2, 8] = "Skip Button";
label[2, 9] = "Pause Button";

// Graphics
label[3, 0] = "Fullscreen Mode";
//label[3, 1] = "Smoothing Mode"; ///Screw that it looks like garbage
label[3, 1] = "Dropshadows";
label[3, 2] = "Extra Effects";
label[3, 3] = "Identifiers";
label[3, 4] = "Color Blind Assistance";
label[3, 5] = "Screenshake";

option[3, 0] = -2;
option[3, 1] = -1;
option[3, 2] = -1;
option[3, 3] = -1;
option[3, 4] = -2;
option[3, 5] = global.screenshake; //1 = Strong; 2 = Mild; 3 = Disabled

// Get initial checkbox state
if (global.fullscreenMode)
    option[3, 0] = -1;
else
    option[3, 0] = -2;
if (global.dropshadows)
    option[3, 1] = -1;
else
    option[3, 1] = -2;
if (global.extraEffects)
    option[3, 2] = -1;
else
    option[3, 2] = -2;
if (global.identifiers)
    option[3, 3] = -1;
else
    option[3, 3] = -2;
if (global.colorBlind)
    option[3, 4] = -1;
else
    option[3, 4] = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Redetermine vertical coordinates every frame for animation
anchorY = (view_yview + y);
menuTop    = (anchorY + 66);
menuBottom = (menuTop + menuHeight);
sliderY = (menuTop + ((rowHeight/2) - ceil(sliderH/2)));

var _mouse_x_rel = (mouse_x - menuLeft);
//var _mouse_y_rel = (mouse_y - menuTop);
var _resetControlsRow = 13;
if (move == -1){
    y -= max(2, y/7);
    if (y &lt;= 1){
        y = 0;
        move = 0;
    }
}else if (move == 1){
    y += 58; //min(34, (608-y)/7);
    if (y &gt;= ystart){
        instance_destroy();
    }
}

selectedRowPrev = selectedRow;
selectedRow = -1;
selectedMenuPrev = selectedMenu;
selectedMenu = -1;
selectedXPrev = selectedX;
selectedX = false;
var _sliderSelectedPrev = sliderSelected;
sliderSelected = -1;

if (!instance_exists(objPopup) || objPopup.y &lt; 120){
    //Selecting menu tabs and rows
    if (move == 0 &amp;&amp; mouse_x &gt; menuLeft &amp;&amp; mouse_x &lt; menuRight){
        if (mouse_y &gt;= (anchorY + tabTopY) &amp;&amp; mouse_y &lt; anchorY + 58){
            selectedMenu = ((_mouse_x_rel) div tabWidth);
            if (selectedMenu == 4){
                selectedX = true;
            }else if (mouse_check_button_pressed(mb_left)){
                menu = selectedMenu;
                settingControl = -1;
                audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
            }
        }
        for(var i=0; i&lt;rows[menu]; i++){
            if (mouse_y &gt;= (menuTop + rowHeight*i) &amp;&amp; mouse_y &lt; (menuTop + rowHeight*(i+1)) &amp;&amp; label[menu, i] != ""){
                selectedRow = i;
            }
        }
        if (menu == 1 || menu == 2){
            if (mouse_y &gt;= (menuTop + rowHeight*_resetControlsRow) &amp;&amp; mouse_y &lt; (menuTop + rowHeight*(_resetControlsRow+1))){
                selectedRow = _resetControlsRow;
            }
        }
    }
    
    //"General" tab volume slider behavior
    if (menu == 0 &amp;&amp; (selectedRow == 2 || selectedRow == 3 || selectedRow == 4)){
        var _inSliderRange = (_mouse_x_rel &gt;= sliderX &amp;&amp; _mouse_x_rel &lt;= (sliderX + sliderW));
        if (_inSliderRange){
            sliderSelected = selectedRow;
        }
    }
    
    //if the mouse was clicked, it should play the click sound instead
    if (!mouse_check_button_pressed(mb_left) &amp;&amp; ((selectedRow != selectedRowPrev &amp;&amp; selectedRow != -1) || (sliderSelected != _sliderSelectedPrev &amp;&amp; sliderSelected != -1) || (selectedMenu != selectedMenuPrev &amp;&amp; selectedMenu != menu &amp;&amp; selectedMenu != -1) || (selectedX &amp;&amp; !selectedXPrev))){
        audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
    }
    if (!(menu == 0 &amp;&amp; mouse_check_button(mb_left))){
        sliderClicked = -1;
    }
    
    switch(menu){
        case 0:
            //toggling options
            if (mouse_check_button_pressed(mb_left) &amp;&amp; sliderClicked == -1 &amp;&amp; selectedRow != -1 &amp;&amp; move == 0){
                var _row = max(selectedRow, sliderClicked);
                switch(_row){
                    case 0:
                        with (objWorld){scrToggleMusic();}
                        if (!global.muteMusic){
                            audio_play_sound_nogroup(sndMakerBoxChecked, 0, 0);
                        }else{
                            audio_play_sound_nogroup(sndMakerBoxUnchecked, 0, 0);
                        }
                        break;
                    case 1:
                        global.muteSFX = !global.muteSFX;
                        if (!global.muteSFX){
                            audio_group_set_gain(RoomSounds, global.sfxLevel/100*global.volumeLevel/100, 0);
                            audio_play_sound(sndMakerBoxChecked, 0, 0); //DO NOT change to "audio_play_sound_nogroup"
                        }else{
                            audio_group_set_gain(RoomSounds, 0, -1);
                            audio_play_sound(sndMakerBoxUnchecked, 0, 0); //DO NOT change to "audio_play_sound_nogroup"
                        }
                        break;
                    case 2:
                    case 3:
                    case 4:
                        if (sliderSelected == _row){
                            sliderClicked = sliderSelected;
                        }
                        break;
                    case 5:
                        global.vineMode ++;
                        audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
                        if (global.vineMode &gt; 3)
                            global.vineMode = 1;
                        break;
                    case 6:
                        global.autoRestart = !global.autoRestart;
                        if (global.autoRestart)
                            audio_play_sound_nogroup(sndMakerBoxChecked, 0, 0);
                        else
                            audio_play_sound_nogroup(sndMakerBoxUnchecked, 0, 0);
                        break;
                    case 7:
                        global.refightAutosave = !global.refightAutosave;
                        if (global.refightAutosave){
                            audio_play_sound_nogroup(sndMakerBoxChecked, 0, 0);
                        }else{
                            audio_play_sound_nogroup(sndMakerBoxUnchecked, 0, 0);
                        }
                        break;
                    case 8:
                        global.refightShields = !global.refightShields;
                        if (global.refightShields){
                            audio_play_sound_nogroup(sndMakerBoxChecked, 0, 0);
                        }else{
                            audio_play_sound_nogroup(sndMakerBoxUnchecked, 0, 0);
                        }
                        break;
                    case 9:
                        global.defaultBuffed = !global.defaultBuffed;
                        if (global.defaultBuffed){
                            audio_play_sound_nogroup(sndMakerBoxChecked, 0, 0);
                        }else{
                            audio_play_sound_nogroup(sndMakerBoxUnchecked, 0, 0);
                        }
                        break;
                }
            }
            if (!global.muteMusic){option[0, 0] = -1;}else{option[0, 0] = -2;}
            if (!global.muteSFX){option[0, 1] = -1;}else{option[0, 1] = -2;}
            if (global.autoRestart){option[0, 6] = -1;}else{option[0, 6] = -2;}
            if (global.refightAutosave){option[0, 7] = -1;}else{option[0, 7] = -2;}
            if (global.refightShields){option[0, 8] = -1;}else{option[0, 8] = -2;}
            if (global.defaultBuffed){option[0, 9] = -1;}else{option[0, 9] = -2;}
            break;
        case 1:
        case 2:
            if (mouse_check_button_pressed(mb_left) || (settingControl &gt;= 0 &amp;&amp; mouse_check_button_pressed(mb_right))){
                if (selectedRow == _resetControlsRow){
                    if ((menu == 1 &amp;&amp; !(global.leftButton[0] == vk_left &amp;&amp; global.rightButton[0] == vk_right &amp;&amp; global.upButton[0] == vk_up &amp;&amp; global.downButton[0] == vk_down &amp;&amp; global.shootButton[0] == ord("Z") &amp;&amp; global.jumpButton[0] == vk_shift &amp;&amp; global.pauseButton[0] == ord("P") &amp;&amp; global.restartButton[0] == ord("R") &amp;&amp; global.skipButton[0] == ord("S")) || (menu == 2 &amp;&amp; !(global.leftButton[1] == gp_padl &amp;&amp; global.rightButton[1] = gp_padr &amp;&amp; global.upButton[1] == gp_padu &amp;&amp; global.downButton[1] == gp_padd &amp;&amp; global.shootButton[1] == gp_face3 &amp;&amp; global.jumpButton[1] == gp_face1 &amp;&amp; global.pauseButton[1] == gp_start &amp;&amp; global.restartButton[1] == gp_face4 &amp;&amp; global.skipButton[1] == gp_face2)))){
                        var t_popup = instance_create(0, -80, objPopup);
                        t_popup.index = menu;
                        audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
                    }
                    settingControl = -1;
                }else if (selectedRow != -1 &amp;&amp; (menu != 2 || selectedRow != 0)){
                    if (settingControl != selectedRow){
                        settingControl = selectedRow;
                        audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
                    }else{
                        settingControl = -1;
                    }
                }else{
                    settingControl = -1;
                }
            }
            if (settingControl != -1 &amp;&amp; ((menu == 1 &amp;&amp; keyboard_check_pressed(vk_anykey)) || (menu == 2 &amp;&amp; scrAnyControllerButton() != -1))){
                var _keyChange = -1;
                if (menu == 1){
                    _keyChange = keyboard_key;
                    if (_keyChange == vk_escape){
                        _keyChange = -1;
                    }
                    if (_keyChange == 160 || _keyChange == 161){   //check if current key pressed is either shift key
                        _keyChange = 16; //set it to work for both shift keys
                    }
                }else{
                    _keyChange = scrAnyControllerButton();
                }
                if (_keyChange != -1){
                    switch(settingControl + (menu-1)){
                        case  0:
                            if (_keyChange &lt;= 0)
                                _keyChange = vk_left;
                            global.leftButton[menu - 1] = _keyChange;
                            break;
                        case  1:
                            if (_keyChange &lt;= 0)
                                _keyChange = vk_right;
                            global.rightButton[menu - 1] = _keyChange;
                            break;
                        case  2:
                            if (_keyChange &lt;= 0)
                                _keyChange = vk_up;
                            global.upButton[menu - 1] = _keyChange;
                            break;
                        case  3:
                            if (_keyChange &lt;= 0)
                                _keyChange = vk_down;
                            global.downButton[menu - 1] = _keyChange;
                            break;
                        case  4:
                            if (_keyChange &lt;= 0)
                                _keyChange = 16;
                            global.jumpButton[menu - 1] = _keyChange;
                            break;
                        case  5:
                            if (_keyChange &lt;= 0)
                                _keyChange = ord('Z');
                            global.shootButton[menu - 1] = _keyChange;
                            break;
                        case  6:
                            if (_keyChange &lt;= 0)
                                _keyChange = ord('R');
                            global.restartButton[menu - 1] = _keyChange;
                            break;
                        case  7:
                            if (_keyChange &lt;= 0)
                                _keyChange = ord('S');
                            global.skipButton[menu - 1] = _keyChange;
                            break;
                        case  8:
                            if (_keyChange &lt;= 0)
                                _keyChange = ord('P');
                            global.pauseButton[menu - 1] = _keyChange;
                            break;
                    }
                    settingControl = -1;
                }
            }
            //get current controls
            option[menu, 0 + (menu-1)] = scrGetBind(global.leftButton, menu - 1, "Unknown");
            option[menu, 1 + (menu-1)] = scrGetBind(global.rightButton, menu - 1, "Unknown");
            option[menu, 2 + (menu-1)] = scrGetBind(global.upButton, menu - 1, "Unknown");
            option[menu, 3 + (menu-1)] = scrGetBind(global.downButton, menu - 1, "Unknown");
            option[menu, 4 + (menu-1)] = scrGetBind(global.jumpButton, menu - 1, "Unknown");
            option[menu, 5 + (menu-1)] = scrGetBind(global.shootButton, menu - 1, "Unknown");
            option[menu, 6 + (menu-1)] = scrGetBind(global.restartButton, menu - 1, "Unknown");
            option[menu, 7 + (menu-1)] = scrGetBind(global.skipButton, menu - 1, "Unknown");
            option[menu, 8 + (menu-1)] = scrGetBind(global.pauseButton, menu - 1, "Unknown");
            break;
        case 3:
            if (mouse_check_button_pressed(mb_left) &amp;&amp; move == 0){
                switch(max(selectedRow, sliderClicked)){
                    case 0:
                        global.fullscreenMode = !global.fullscreenMode;
                        if (global.fullscreenMode){
                            audio_play_sound_nogroup(sndMakerBoxChecked, 0, 0);
                            option[3, 0] = -1;
                        }else{
                            audio_play_sound_nogroup(sndMakerBoxUnchecked, 0, 0);
                            option[3, 0] = -2;
                        }
                        window_set_fullscreen(global.fullscreenMode);
                        break;
                    case 1:
                        global.dropshadows = !global.dropshadows;
                        if (global.dropshadows){
                            audio_play_sound_nogroup(sndMakerBoxChecked, 0, 0);
                            option[3, 1] = -1;
                        }else{
                            audio_play_sound_nogroup(sndMakerBoxUnchecked, 0, 0);
                            option[3, 1] = -2;
                        }
                        break;
                    case 2:
                        global.extraEffects = !global.extraEffects;
                        if (global.extraEffects){
                            audio_play_sound_nogroup(sndMakerBoxChecked, 0, 0);
                            option[3, 2] = -1;
                        }else{
                            audio_play_sound_nogroup(sndMakerBoxUnchecked, 0, 0);
                            option[3, 2] = -2;
                        }
                        break;
                    case 3:
                        global.identifiers = !global.identifiers;
                        if (global.identifiers){
                            audio_play_sound_nogroup(sndMakerBoxChecked, 0, 0);
                            option[3, 3] = -1;
                        }else{
                            audio_play_sound_nogroup(sndMakerBoxUnchecked, 0, 0);
                            option[3, 3] = -2;
                        }
                        break;
                    case 4:
                        global.colorBlind = !global.colorBlind;
                        if (global.colorBlind){
                            audio_play_sound_nogroup(sndMakerBoxChecked, 0, 0);
                            option[3, 4] = -1;
                        }else{
                            audio_play_sound_nogroup(sndMakerBoxUnchecked, 0, 0);
                            option[3, 4] = -2;
                        }
                        break;
                    case 5:
                        global.screenshake ++;
                        audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
                        if (global.screenshake &gt; 3)
                            global.screenshake = 1;
                        break;
                }
            }
            break;
    }
    
    if (menu == 0 &amp;&amp; sliderClicked &gt;= 2 &amp;&amp; sliderClicked &lt;= 4){
        var _sliderVal = clamp(((mouse_x-view_xview) - (anchorX + sliderX)) * 100/sliderW, 0, 100);
        if (sliderClicked == 2){
            global.volumeLevel = _sliderVal;
        }else if (sliderClicked == 3){
            global.musicLevel = _sliderVal;
        }else if (sliderClicked == 4){
            global.sfxLevel = _sliderVal;
        }
        
        // update music volume
        global.currentGain = 0.4 * (global.musicLevel/100 * global.volumeLevel/100) * global.musFadeMultiplier;  //0.4 is a shared music multiplier (should really be a global variable...)
        if (global.gamePaused){
            audio_sound_gain(global.currentMusic, global.currentGain/2, 0);
        }else{
            audio_sound_gain(global.currentMusic, global.currentGain, 0);
        }
        
        // update RoomSounds group volume
        audio_group_set_gain(RoomSounds, global.sfxLevel/100 * global.volumeLevel/100, 0);
    }
    
    if (selectedX){
        if (mouse_check_button_pressed(mb_left)){
            clickedX = true;
        }
    }
    if ((selectedX &amp;&amp; clickedX &amp;&amp; move != 1 &amp;&amp; mouse_check_button_released(mb_left)) || keyboard_check_pressed(vk_escape)){
        move = 1;
        scrSaveConfig();
        audio_play_sound_nogroup(sndMakerMenuRelease, 0, 0);
    }
    if (!mouse_check_button(mb_left)){
        clickedX = false;
    }
}else{
    selectedRow = -1;
    selectedMenu = -1;
    selectedX = false;
    clickedX = false;
}

if (resetControls){
    if (instance_exists(objPopup)){
        resetRow = ((objPopup.y - 32) div rowHeight);
        event_user(0);
    }else{
        resetControls = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Controls
if (menu == 1){ //keyboard
        resetRow --;
        if (resetRow &lt; 0 &amp;&amp; global.leftButton[0] != vk_left){
            global.leftButton[0] = vk_left;
            audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
        }
        resetRow --;
        if (resetRow &lt; 0 &amp;&amp; global.rightButton[0] != vk_right){
            global.rightButton[0] = vk_right;
            audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
        }
        resetRow --;
        if (resetRow &lt; 0 &amp;&amp; global.upButton[0] != vk_up){
            global.upButton[0] = vk_up;
            audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
        }
        resetRow --;
        if (resetRow &lt; 0 &amp;&amp; global.downButton[0] != vk_down){
            global.downButton[0] = vk_down;
            audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
        }
        resetRow --;
        if (resetRow &lt; 0 &amp;&amp; global.jumpButton[0] != vk_shift){
            global.jumpButton[0] = vk_shift;
            audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
        }
        resetRow --;
        if (resetRow &lt; 0 &amp;&amp; global.shootButton[0] != ord("Z")){
            global.shootButton[0] = ord("Z");
            audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
        }
        resetRow --;
        if (resetRow &lt; 0 &amp;&amp; global.restartButton[0] != ord("R")){
            global.restartButton[0] = ord("R");
            audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
        }
        resetRow --;
        if (resetRow &lt; 0 &amp;&amp; global.skipButton[0] != ord("S")){
            global.skipButton[0] = ord("S");
            audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
        }
        resetRow --;
        if (resetRow &lt; 0 &amp;&amp; global.pauseButton[0] != ord("P")){
            global.pauseButton[0] = ord("P");
            audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
        }
}else{ //gamepad
    resetRow --;
    if (resetRow &lt; 0 &amp;&amp; global.leftButton[1] != gp_padl){
        global.leftButton[1] = gp_padl;
        audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
    }
    resetRow --;
    if (resetRow &lt; 0 &amp;&amp; global.rightButton[1] != gp_padr){
        global.rightButton[1] = gp_padr;
    audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
    }
    resetRow --;
    if (resetRow &lt; 0 &amp;&amp; global.upButton[1] != gp_padu){
        global.upButton[1] = gp_padu;
        audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
    }
    resetRow --;
    if (resetRow &lt; 0 &amp;&amp; global.downButton[1] != gp_padd){
        global.downButton[1] = gp_padd;
        audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
    }
    resetRow --;
    if (resetRow &lt; 0 &amp;&amp; global.jumpButton[1] != gp_face1){
        global.jumpButton[1] = gp_face1;
        audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
    }
    resetRow --;
    if (resetRow &lt; 0 &amp;&amp; global.shootButton[1] != gp_face3){
        global.shootButton[1] = gp_face3;
        audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
    }
    resetRow --;
    if (resetRow &lt; 0 &amp;&amp; global.restartButton[1] != gp_face4){
        global.restartButton[1] = gp_face4;
        audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
    }
    resetRow --;
    if (resetRow &lt; 0 &amp;&amp; global.skipButton[1] != gp_face2){
        global.skipButton[1] = gp_face2;
        audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
    }
    resetRow --;
    if (resetRow &lt; 0 &amp;&amp; global.pauseButton[1] != gp_select){
        global.pauseButton[1] = gp_select;
        audio_sound_pitch(audio_play_sound_nogroup(sndMakerMenuClick, 0, 0), 0.7);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// all drawing is based off these coordinates

// individual piece values
var _borderSize = 8;
var _rowMiddle = (menuTop + 16);
var _backRectRight = (menuRight-1);
var _backRectBottom = menuRight;
//var _bkBottom = menuRight - 

// alternating blue-&gt;lblue background rectangles
draw_set_color(blue);
draw_rectangle(menuLeft, menuTop, _backRectRight, menuBottom, false);
// light blue
draw_set_color(lblue);
var _t = (menuTop + rowHeight);
for (var i=0; i&lt;rowTotal-1; i+=2;){
    draw_rectangle(menuLeft, _t, _backRectRight, _t + (rowHeight-1), false);
    _t += 2*rowHeight;
}
draw_set_color(c_white);

if (selectedRow != -1){
    draw_set_alpha(0.45 + 0.225*sin((global.countPersistent mod 75)/75 * 2*pi));
    draw_rectangle(menuLeft, menuTop + (rowHeight*selectedRow), _backRectRight, (menuTop + (rowHeight*selectedRow)) + (rowHeight-1), false);
    draw_set_alpha(1);
}

// Border sides
draw_sprite_ext(sprMakerSettingsBorder, 0, (menuLeft + _borderSize), (menuTop - _borderSize), (menuWidth/_borderSize) - 2, 1, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorder, 0, (menuLeft + _borderSize), (menuBottom + _borderSize), (menuWidth/_borderSize) - 2, -1, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorder, 1, menuLeft, menuTop, 1, (menuHeight/_borderSize), 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorder, 1, menuRight, menuTop, -1, (menuHeight/_borderSize), 0, c_white, 1);
// Border corners
draw_sprite_ext(sprMakerSettingsBorder, 2, menuLeft, (menuTop - _borderSize), 1, 1, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorder, 2, menuRight, (menuTop - _borderSize), -1, 1, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorder, 2, menuLeft, (menuBottom + _borderSize), 1, -1, 0, c_white, 1);
draw_sprite_ext(sprMakerSettingsBorder, 2, menuRight, (menuBottom + _borderSize), -1, -1, 0, c_white, 1);

draw_set_font(fDefault12);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

if (menu &gt;= 0 &amp;&amp; menu &lt;= 3){
    for(var i=0; i&lt;rows[menu]; i++;){
        scrDrawTextOutline(labelTextX, _rowMiddle+(rowHeight*i), label[menu, i], c_white, dblue);
    }
}
draw_set_halign(fa_center);
if (menu &gt;= 0 &amp;&amp; menu &lt;= 3){
    if (menu == 1 || menu == 2){
        for(var i=0; i&lt;rows[menu]; i++;){
            if (settingControl == i){
                if (menu == 1){
                    scrDrawTextOutline(optionTextX, _rowMiddle+(rowHeight*i), "Press a key", c_white, dblue);
                }else{
                    scrDrawTextOutline(optionTextX, _rowMiddle+(rowHeight*i), "Press a button", c_white, dblue);
                }
            }else{
                scrDrawTextOutline(optionTextX, _rowMiddle+(rowHeight*i), option[menu, i], c_white, dblue);
            }
            scrDrawTextOutline(menuLeft + ceil(menuWidth/2), _rowMiddle+(rowHeight*13), "Reset Controls", c_white, dblue);
        }
    }else{
        if (menu == 0){ //draw volume sliders
            var _sliderL = (anchorX + sliderX);
            
            var t_percent = 100;
            //show_debug_message("x: " + string(sliderX) + ";  y: " + string(sliderY)  );
            var _col = c_white;
            for(var i=2;i&lt;=4;i++;){
                if (i == 2){
                    t_percent = global.volumeLevel;
                }else if (i == 3){
                    t_percent = global.musicLevel;
                }else if (i == 4){
                    t_percent = global.sfxLevel;
                }
                
                _col = c_white;
                if ((i == 3 &amp;&amp; global.muteMusic) || (i == 4 &amp;&amp; global.muteSFX)){_col = c_gray;}
                draw_sprite_stretched_ext(sprMakerSettingsSlider, 1, _sliderL, sliderY + (rowHeight*i), sliderW, sliderH, _col, 1);
                draw_sprite_stretched_ext(sprMakerSettingsSlider, 0, _sliderL, sliderY + (rowHeight*i), sliderW * (t_percent/100), sliderH, _col, 1);
                scrDrawTextOutline(optionTextX + 1, _rowMiddle+(rowHeight*i), string(floor(t_percent)), _col, merge_color(dblue, _col, 0.4));
                
                // "glow"
                if (i == sliderClicked || (sliderClicked == -1 &amp;&amp; i == selectedRow &amp;&amp; (mouse_x &gt;= _sliderL &amp;&amp; mouse_x &lt; (_sliderL + sliderW)))){
                    draw_set_blend_mode(bm_add);
                    draw_set_alpha(0.2);
                    draw_rectangle(_sliderL, (sliderY + (rowHeight*i)), (_sliderL + (sliderW-1)), (sliderY + (rowHeight*i) + (sliderH-1)), false);
                    draw_set_alpha(1);
                    draw_set_blend_mode(bm_normal);
                }
            }
            
            // black rectangle outlines
            draw_set_color(c_black);
            for(var i=2; i&lt;=4; i++;){
                draw_rectangle(_sliderL, (sliderY + (rowHeight*i)), (_sliderL + (sliderW-1)), (sliderY + (rowHeight*i) + (sliderH-1)), true);
            }
            draw_set_color(c_white);
        }
        var t_text = "";
        for(var i=0; i&lt;rows[menu]; i++){
            if (option[menu, i] == -1){ //checked
                draw_sprite(sprMakerSettingsCheckbox, 1, optionTextX, _rowMiddle+(rowHeight*i) - 2);
            }else if (option[menu, i] == -2){ //unchecked
                draw_sprite(sprMakerSettingsCheckbox, 0, optionTextX, _rowMiddle+(rowHeight*i) - 2);
            }else if (option[menu, i] == -4){ //slider
                //do nothing
            }else{ //menu-specific
                if (menu == 0 &amp;&amp; i == 5){
                    if (global.vineMode == 1)
                        t_text = "Combined";
                    else if (global.vineMode == 2)
                        t_text = "Arrows + Hold Jump";
                    else
                        t_text = "Press Jump";
                    scrDrawTextOutline(optionTextX, _rowMiddle+(rowHeight*i), t_text, c_white, dblue);
                }else if (menu == 3){
                    if (i == 5){
                        if (global.screenshake == 1){
                            t_text = "Strong";
                        }else if (global.screenshake == 2){
                            t_text = "Mild";
                        }else{
                            t_text = "Off";
                        }
                        scrDrawTextOutline(optionTextX, _rowMiddle+(rowHeight*i), t_text, c_white, dblue);
                    }
                }
            }
        }
    }
}

// Submenu tabs
var _tabTextX = (anchorX + 16);
var _tabY = (menuTop-(tabHeight+_borderSize));
var _tabTextY = (anchorY + 46);
var _tabSubimg = 0;
var _tabInd = 0;
repeat(tabNum){
    // subimage of tab
    _tabSubimg = 0;
    if (_tabInd == menu){
        _tabSubimg = 2;
    }else if (_tabInd == selectedMenu){
        _tabSubimg = 1;
    }else{
        _tabSubimg = 0;
    }
    
    draw_sprite(sprMakerSettingsTab, _tabSubimg, menuLeft + tabWidth*_tabInd, _tabY);
    scrDrawTextOutline(_tabTextX + tabWidth*(_tabInd+0.5), _tabTextY, tabName[_tabInd], c_white, dblue);
    _tabInd ++;
}

// "X" button
var _ind = 0;
if (selectedX){
    if (clickedX){
        _ind = 2;
    }else{
        _ind = 1;
    }
}else{
    _ind = 0;
}
draw_sprite(sprMakerSettingsX, _ind, anchorX + closeButtonX, _tabY);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
