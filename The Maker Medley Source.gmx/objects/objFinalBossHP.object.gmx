<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalHealthCase1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>barSurf = -4;
surf2 = -4; //Undertale
currentHPVal = 0; //position in the global final boss HP array to look at
shownHPAmt = 1;
shownHPPercentage = 0; //initial animation
yPos = -64;
yPosLerp = 0;
descend = 1;
roomStart = -4;
image_alpha = 1;
depth = -7;

textCol1 = make_color_rgb( 0, 124, 225);
textCol2 = make_color_rgb( 0, 64, 112);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(barSurf))
    surface_free(barSurf);
if (surface_exists(surf2))
    surface_free(surf2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _num;
_num = scrFinalGetHP(currentHPVal);

if (shownHPPercentage &lt; 1){
    shownHPPercentage = min(shownHPPercentage+0.025, 1);
    shownHPAmt = _num/global.finalBossHPMax;
}
if (shownHPAmt &gt; _num/global.finalBossHPMax){
    shownHPAmt = max(shownHPAmt - 0.0025, _num/global.finalBossHPMax);
}
if (descend != 0){
    yPosLerp += 0.04*descend;
    if (descend &gt; 0 &amp;&amp; yPosLerp &gt;= 1){
        yPosLerp = 1;
        descend = 0;
    }
    if (descend &lt; 0 &amp;&amp; yPosLerp &lt;= 0){
        yPosLerp = 0;
        descend = 0;
    }
    yPos = lerp(-64, 64, sin(yPosLerp*pi/2));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(barSurf))
    surface_free(barSurf);
if (surface_exists(surf2))
    surface_free(surf2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (persistent){
    if (room != roomStart){
        instance_destroy();
    }else{
        persistent = false;
        roomStart = -4;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.screenshotMode){exit;}

var _undertale;
if (instance_exists(objFinalBossDraw) &amp;&amp; objFinalBossDraw.undertale){
    _undertale = 1;
}else{
    _undertale = 0;
}

if (!surface_exists(barSurf)){
    barSurf = surface_create(312, 46);
}
if (surface_exists(barSurf) &amp;&amp; image_alpha &gt; 0){
    surface_set_target(barSurf);
    draw_clear_alpha(c_black, 0);
    
    if (_undertale == 1)
        draw_sprite_ext(sprFinalHealthBack, 0, 0, 0, 1, 1, 0, c_black, 1); //backing for the bar
    else
        draw_sprite(sprFinalHealthBack, 0, 0, 0); //backing for the bar
    var _hpLength;
    _hpLength = 294*shownHPAmt*shownHPPercentage
    //health bar
    if (shownHPAmt &gt; 0){
        draw_sprite(sprFinalHealthBar2, _undertale, _hpLength - 11, 8); //pointed end bar
        
        if (_hpLength &gt; 17){
            draw_sprite_stretched(sprFinalHealthBar1, _undertale, 7, 8, _hpLength - 17, 30); //main bar
        }
    }
    
    //text
    draw_set_font(fDefault18);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    var _num = -1;
    _num = string(floor(scrFinalGetHP(currentHPVal)  * shownHPPercentage));
    
    if (_undertale == 1){
        if (!surface_exists(surf2))
            surf2 = surface_create(96, 46);
        if (surface_exists(surf2)){
            surface_set_target(surf2);
            draw_clear_alpha(c_black, 0);
            
            draw_set_color(c_black);
            draw_text_outline(48, 26, _num, 2, c_white, 8);
            draw_set_color(c_white);
            
            surface_reset_target();
        }
        draw_set_colour_write_enable(true, true, true, false);
        draw_set_blend_mode_ext(bm_inv_dest_color, bm_inv_src_color);
        draw_surface(surf2, 104, 0);
        draw_set_blend_mode(bm_normal);
        draw_set_colour_write_enable(true, true, true, true);
    }else{
        draw_set_color(textCol1);
        
        draw_text_outline(152, 26, _num, 2, textCol2, 8);
        
        draw_set_color(c_white);
    }
    
    //casing
    draw_sprite(sprFinalHealthCase1, _undertale*2, 0, 0); //casing for the head
    draw_sprite_stretched(sprFinalHealthCase2, 2*_undertale, 11, 0, 271, 46); //casing for the main bar
    draw_sprite(sprFinalHealthCase3, _undertale*2, 281, 0); //pointed end casing
    
    //glow
    if (shownHPAmt &gt; 0 &amp;&amp; _undertale != 1){
        if (_hpLength &gt; 22){
            draw_sprite(sprFinalHealthCase1, 1, 0, 0);
        }else if (_hpLength &gt; 16){
            draw_sprite_part(sprFinalHealthCase1, 1, 0, 0, _hpLength - 10, 46, 0, 0);
        }else if (_hpLength &gt; 0){
            draw_sprite_part(sprFinalHealthCase1, 1, 0, 11 + 12*(1-(_hpLength)/14), 6, 24*(_hpLength)/14, 0, 11 + 12*(1-(_hpLength)/14));
        }
        if (_hpLength &gt; 26){
            draw_sprite_stretched(sprFinalHealthCase2, 1, 11, 0, min(_hpLength - 22, 270), 46); //main bar
        }
        if (_hpLength &gt;= 294){
            draw_sprite(sprFinalHealthCase3, 1,  281, 0); //main bar
        }
    }
    
    draw_set_blend_mode(bm_subtract);
    draw_sprite(sprFinalHealthCorner, 0, 0, 0);
    draw_set_blend_mode(bm_normal);
    
    surface_reset_target();
    
    var _rotCoords;
    _rotCoords = scrChangeOrigin(0, 0, 156, 23, -view_angle);
    var t_coordDist = point_distance(400, 304, 400, yPos);
    var t_coordDir = point_direction(400, 304, 400, yPos);
    draw_surface_ext(barSurf, view_xview + (400 + lengthdir_x(t_coordDist, t_coordDir-view_angle) + _rotCoords[0])*view_wview/800, view_yview + (304 + lengthdir_y(t_coordDist, t_coordDir-view_angle) + _rotCoords[1])*view_hview/608, view_wview/800, view_hview/608, -view_angle, c_white, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
