<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//make sure we never have more than one world object
if (instance_number(object_index) &gt; 1){
    instance_destroy();
    exit;
}else{
    global.restarting = false;
    global.debugOverlay = true;
    //Stored Values - 0 = Flappy Player X Offset; 1 = Flappy Player Scale
    for(var i=1;i&gt;=0;i--){
        global.storedVal[i] = 0; //only persist until the game ends
    }
}

//Custom Variables
fadeIn = false; //fade in to room
roomPrevious = room;
fullRestart = false; //control + restart
prePauseVAngle = 0;
playerTouchingSave = false;
//Prevents moving backgrounds from "stuttering" if the player resets
bkXScroll = 0; //how much is scrolled
bkYScroll = 0;
bkXScrollAmt = 0; //how much to scroll
bkYScrollAmt = 0;
//Music
playMusic = true; //disable to prevent looping music from playing again once it is stopped
playIntro = true;
musicToPlay = noone; //noone = Set based on room
createMusicIdent = true;
pausedSong = noone;
//Audio Groups
if (!audio_group_is_loaded(RoomSounds)){
    audio_group_load(RoomSounds);
}

//Water Persistence
waterYOffset = 0;
waterSineVal = 0;

// Title
titleSmallButtonY = 532;
titleCurMenu = 0;
titleToMenu = 0;
titleTotalButtons = 6;
with (objTitleButton){
    instance_destroy();  // transitioning from pause menu(?)
}
for (var i=(titleTotalButtons-1); i&gt;=0; i--){
    button[i] = noone;
}

// used to decide whether certain button sprites should be gray or white during the transition animation
// this does not enable/disable the button's functionality
titlePracticeUnlocked = false;
titleStatsToShow = false;
titleCounter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_exists(global.pauseSprite)){
    sprite_delete(global.pauseSprite);         //free the pause screen
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return from practice mode to the practice menu
global.practicing = false;
room_goto(rPracticeMenu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Practice Mode
instance_create(0, 0, objGameOverText);  // it just says "Press 'R' to restart", which is applicable here, too

//Freeze player characters
with (objPlayer){
    with (instance_create(x, y, objFakePlayer)){
        image_index = other.image_index;
        image_speed = 0; //other.image_speed;
        sprite_index = other.sprite_index;
        image_xscale = other.xScale;
    }
    instance_destroy();
}
with (objUndertaleHeart){
    frozen = true;
}
with (objUndertaleHeart2){
    frozen = true;
}
with (objTHKid){
    frozen = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///resume music (added)
playMusic = true;
alarm[0] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///return to previous window position/size (after using display_reset)

if (!window_get_fullscreen())
{
    window_set_position(global.windowXPrev,global.windowYPrev);
    window_set_size(global.windowWidthPrev,global.windowHeightPrev);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pause current music when it's done fading out
audio_pause_sound(global.currentMusic);
playMusic = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///music things
if (playMusic &amp;&amp; !global.muteMusic &amp;&amp; musicToPlay != -1){
    var _loopSong = noone;
    var _introLength = 0;
    if (musicToPlay &lt; 0 &amp;&amp; musicToPlay != -2){  // -1 stop BGM, -2 = ignore BGM, -4 = based on room
        switch(room){
            case rTitle:
            case rMenu:
            case rPracticeMenu:
                _loopSong = global.BGMTitle;
                break;
            case rStage01Abstr4ktNew:
            case rStage01Dice:
            case rStage01Kurath:
            case rStage01Zilily:
            case rStage01Ace:
            case rStage01Patrick:
            case rStage01Onetwentyeight:
            case rStage01Purify:
            case rChaozB:
                _loopSong = global.BGMStage1a;
                break;
            case rStage02Shark1:
            case rStage02Shark2:
            case rStage02Erik:
            case rStage02Klamy:
            case rStage02Telejump:
            case rStage02Abstr4ktNew:
            case rStage02Vovka:
                _loopSong = global.BGMStage2a;
                break;
            case rStage02Flappy:
            case rGeezer01:
                _loopSong = global.BGMStage2b;
                break;
            case rStage03Hub:
                _loopSong = global.BGMStage3Hub;
                break;
            case rStage03PvZ:
                _loopSong = global.BGMStage3a;
                break;
            case rStage03Undertale:
            case rStage03UndertalePractice:
                _loopSong = global.BGMStage3b;
                break;
            case rStage03Touhou:
                _loopSong = global.BGMStage3c;
                break;
            case rStage04New_1:
            case rStage04New_2:
            case rStage04New_3:
            case rStage04New_4:
            case rFinalBoss_1:
                _loopSong = global.BGMStage4;
                break;
        }
    }else{
        _loopSong = musicToPlay;
    }
    if (_loopSong != noone &amp;&amp; _loopSong != -1){
        if (_loopSong &gt;= 0){
            //looping
            switch(_loopSong){
                case global.BGMStage2a:
                    _introLength = 90;
                    break;
                case global.BGMBoss2a:
                    _introLength = 0.56;
                    break;
                case global.BGMBoss2c:
                    _introLength = 5.35;
                    break;
                case global.BGMStage3a:
                    //_introLength = 101.372;
                    break;
                case global.BGMStage3c:
                    _introLength = 0.72;
                    break;
                case global.BGMStage4:
                    _introLength = 30.00;
                    break;
                case global.BGMBoss4Main2:
                    _introLength = 3.32;
                    break;
                case global.BGMBoss4Main3:
                    _introLength = 34.511;
                    break;
                case global.BGMBoss4Main4:
                    _introLength = 1.04;
                    break;
            }
            
            if (!audio_is_playing(_loopSong) || audio_is_paused(_loopSong)){
                global.currentMusicID = -1;
                playIntro = true;
                if (audio_is_paused(_loopSong)){  // see if the paused song is the song to loop
                    audio_resume_sound(_loopSong);
                    if (audio_is_paused(pausedSong)){  // pausedSong != _loopSong
                        audio_stop_sound(pausedSong);
                        pausedSong = -1;
                    }else{
                        global.currentMusic = pausedSong;
                    }
                    
                    global.currentMusic = _loopSong;
                    _loopSong = -1;
                }else{
                    scrPlayMusic(_loopSong, 1);
                }
                audio_stop_sound(pausedSong);
                pausedSong = -1;
                
                var _name = "";
                var _maker = "";
                if (_loopSong &gt;= 0 &amp;&amp; createMusicIdent){
                    scrIdentMusic(_loopSong);
                    createMusicIdent = false;
                }
            }
        }
        if (playIntro &amp;&amp; audio_sound_get_track_position(global.currentMusic) &gt;= _introLength){
            playIntro = false; //only play the intro once
        }else if (!playIntro &amp;&amp; audio_sound_get_track_position(global.currentMusic) &lt; _introLength){
            audio_sound_set_track_position(global.currentMusic, _introLength);
        }
    }else{
        audio_stop_sound(global.currentMusic);
    }
}else if (audio_is_playing(global.currentMusic)){
    if (!playMusic || musicToPlay == -1){
        audio_stop_sound(global.currentMusic);
    }else if (global.muteMusic &amp;&amp; !audio_is_paused(global.currentMusic)){
        if (audio_is_playing(pausedSong)){
            audio_stop_sound(pausedSong);
            pausedSong = -1;
        }
        audio_pause_sound(global.currentMusic);
        pausedSong = global.currentMusic;
    }
}
with (objMakerIdent){
    if (roomTransitionMusicCheck &amp;&amp; music &gt;= 0 &amp;&amp; !audio_is_playing(music)){
        instance_destroy();
    }
}

if (audio_exists(global.musicFading)){
    if (global.musFadeMultiplier &gt; 0){
        global.musFadeMultiplier = max(global.musFadeMultiplier - global.musicFadeDec, 0);
        if (global.musFadeMultiplier &lt;= 0){
            if (musicToPlay == noone || audio_is_playing(global.musicFading)){
                musicToPlay = -1;
            }
            if (global.musicFadeEnd == "pause"){
                audio_pause_sound(global.musicFading);
                pausedSong = global.musicFading;
            }else{  // "stop"
                if (global.musicFadeEnd != "stop"){
                    show_debug_message("global.musicFadeEnd is set to " + string(global.musicFadeEnd) + ", which is not a valid option. Stopping the song id in global.musicFading");
                }
                audio_stop_sound(global.musicFading);
            }
            global.musicFading = -1;
        }else{
            audio_sound_gain(global.musicFading, 0.4 * (global.musicLevel/100 * global.volumeLevel/100) * global.musFadeMultiplier, 0);
        }
    }
}else{
    if (global.musFadeMultiplier &lt; 1){
        global.musFadeMultiplier = min(global.musFadeMultiplier + global.musicFadeInc, 1);
        audio_sound_gain(global.currentMusic, max(audio_sound_get_gain(global.currentMusic), 0.4 * (global.musicLevel/100 * global.volumeLevel/100) * global.musFadeMultiplier), 0);
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///misc. effects
if (!global.gamePaused){
    waterYOffset += 1;
    waterSineVal += pi/40; //80 frames (1.6 seconds) for full cycle
    if (global.dead &amp;&amp; global.deathSlow &gt; 0){
        global.deathSlow = max(global.deathSlow - 1/40, 0);
    }
    if (instance_exists(objMakerWaterCtrl)){
        objMakerWaterCtrl.yOffset = waterYOffset;
        objMakerWaterCtrl.sineVal = waterSineVal;
    }
    bkXScroll ++;
    bkYScroll ++;
    if (background_index == bkMakerSky || room == rStage01Patrick || room == rStage02Abstr4ktNew){
        background_x[0] = bkXScroll * bkXScrollAmt;
    }else if (room == rGeezer01 || room == rGeezerHitchcock){
        background_y[1] = -bkYScroll * bkYScrollAmt;
        background_y[2] =  bkYScroll * bkYScrollAmt;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///function keys
if (keyboard_check_pressed(vk_f2) &amp;&amp; room != rTitle &amp;&amp; room != rMenu &amp;&amp; room != rPracticeMenu)
{
    scrRestartGame();
    exit;
}
//toggle fullscreen mode
if (keyboard_check_pressed(vk_f4))  // &amp;&amp; !global.gamePaused)    
{
    global.fullscreenMode = !global.fullscreenMode;
    
    window_set_fullscreen(global.fullscreenMode);
    
    scrSaveConfig();    //save fullscreen setting
}

//reset window size
if (keyboard_check_pressed(vk_f5))  // &amp;&amp; !global.gamePaused)    
{
    scrResetWindowSize();
}

if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("M")))
{
    //toggle mute music setting
    scrToggleMusic();
    
    scrSaveConfig();    //save mute setting
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///game checks

//set linear interpolation depending on what the current smoothing setting is
texture_set_interpolation(false);

//controller checks
if (global.controllerEnabled &amp;&amp; global.controllerIndex != -1)
{
    if (!global.controllerMode)  //check if we should switch to controller mode
    {
        if (keyboard_check_pressed(vk_anykey))
        {
            global.controllerDelay = -1;
        }
        else if (scrAnyControllerButton() != -1)
        {
            if (global.controllerDelay == -1)
                global.controllerDelay = global.controllerDelayLength;
        }
    }
    else    //check if we should switch to keyboard mode
    {
        if (keyboard_check_pressed(vk_anykey))
        {
            if (global.controllerDelay == -1)
                global.controllerDelay = global.controllerDelayLength;
        }
        else if (scrAnyControllerButton() != -1)
        {
            global.controllerDelay = -1;
        }
    }
    
    if (global.controllerDelay != -1)   //check delay for switching between keyboard/controller
    {
        if (global.controllerDelay == 0)    //delay over, toggle controller mode
        {
            global.controllerMode = !global.controllerMode;
            global.controllerDelay = -1;
        }
        else
        {
            global.controllerDelay -= 1;
        }
    }
}

if ((global.gameStarted || global.practicing)){
    //handle pausing
    var _popupFocused = (instance_exists(objPopup) &amp;&amp; (objPopup.y &gt;= 120 &amp;&amp; objPopup.move != -1));
    var _settingsFocused = (instance_exists(objSettingsMenu) &amp;&amp; (objSettingsMenu.y &lt;= 480 || objSettingsMenu.move != 1));
    var _statsFocused = (room != rTMM_ClearLobby &amp;&amp; instance_exists(objStatsDisplay) &amp;&amp; (objStatsDisplay.y &lt;= 480 || objStatsDisplay.move != 1));
    var _guiFocused = (_popupFocused || _settingsFocused || _statsFocused);
    if (global.pauseDelay &lt;= 0 &amp;&amp; !_guiFocused) //check if we can pause/unpause the game
    {
        if ((scrButtonCheckPressed(global.pauseButton) || keyboard_check_pressed(vk_escape)) &amp;&amp; (!global.noPause || global.debugMode))
        {
            if (!global.gamePaused)  //game currently not paused, pause the game
            {
                var _playerCanPause = false;
                
                if (global.dead){
                    _playerCanPause = true;
                }else{
                    if ((instance_exists(objMakerBossSave) || (room == rOpening || room == rStage03Hub || room == rTMM_ClearLobby)) &amp;&amp; !instance_exists(objGeneralDialogue)){
                        _playerCanPause = true;
                    }else{
                        with (objPlayer){
                            _playerCanPause = (place_meeting(x, y, objSave) || place_meeting(x, y, objS4AutosaveMarkerForPausing));
                        }
                        with (objS2FlappyShip){
                            if (active &amp;&amp; !frozen &amp;&amp; !moving){
                                _playerCanPause = true;
                            }
                        }
                    }
                    
                    if (instance_exists(objPlayer)){
                        if (objPlayer.frozen){
                            _playerCanPause = false;
                        }
                    }
                }
                
                if (_playerCanPause &amp;&amp; surface_exists(application_surface)){ //we need to check if the application_surface exists in case it was unloaded after the previous frame
                    global.gamePaused = true;  //set the game to paused
                    global.pauseDelay = global.pauseDelayLength; //set pause 
                    instance_deactivate_all(true);  //deactivate everything
                    instance_activate_object(objMouseClickCheck);
                    with (instance_create(-100, -100, objSettingsButton)){type = 0;}
                    /*// button to create stats menu
                    if (room != rTMM_ClearLobby){  
                        with (instance_create(-100, -100, objSettingsButton)){type = 1;}
                    }*/
                    button[0] = instance_create(view_xview + 400, view_yview + 320, objTitleButton);  // Resume
                    button[0].sprite_index = sprMakerGUIButtonMed;
                    button[0].index = 0;
                    button[0].textSpr = sprMakerMenuTextBig;
                    button[0].textInd = 4;
                    button[1] = instance_create(view_xview + 400, view_yview + 416, objTitleButton);  // Exit Game
                    button[1].sprite_index = sprMakerGUIButtonMed;
                    button[1].index = 1;
                    button[1].textSpr = sprMakerMenuTextBig;
                    button[1].textInd = 5;
                    
                    if (sprite_exists(global.pauseSprite)){
                        sprite_delete(global.pauseSprite);
                        global.pauseSprite = -1;
                    }
                    global.pauseSprite = scrGetScreenSprite();
                    
                    prePauseVAngle = view_angle;
                    view_angle = 0;
                    global.currentGain = audio_sound_get_gain(global.currentMusic);
                    audio_sound_gain(global.currentMusic, global.currentGain/2, 0);
                }
            }
            else    //game currently paused, unpause the game
            {
                event_user(1); //Unpause the game
            }
        }
    }
    else
    {
        global.pauseDelay -= 1;
    }
    
    if (!global.gamePaused &amp;&amp; (global.gameStarted || global.practicing)) //check if the game is currently paused
    {
        if (!global.screenshotMode){
            global.count ++;
            global.countPersistent ++; //ADDED: persistent timer
        }
        
        if (scrButtonCheckPressed(global.restartButton) &amp;&amp; global.canRestart)
        {
            scrRestartScreen();
        }

        if (global.timeWhenDead || !global.dead)  //increment timer
        {
            global.timeMicro += delta_time;
            global.time += global.timeMicro div 1000000;
            global.timeMicro = global.timeMicro mod 1000000;
        }
    }
    
    scrSetRoomCaption();    //keep caption updated
}

//Pause Menu
if (global.gamePaused &amp;&amp; !_guiFocused){
    with (objTitleButton){
        if (place_meeting(x, y, objMouseClickCheck)){
            if (mouse_check_button_pressed(mb_left)){
                clicked = true;
                audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);  // for buttons that change rooms
            }else if (!selected){
                audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
            }
            selected = true;
            
            if (clicked &amp;&amp; selected &amp;&amp; mouse_check_button_released(mb_left)){
                switch(index){
                    case 0:  // Resume
                        with (other){
                            event_user(1); //Unpause the game
                        }
                        break;
                    case 1:  // Quit
                        instance_activate_all();
                        instance_destroy(objSettingsButton);
                        instance_destroy(objSettingsMenu);
                        //instance_destroy(objStatsDisplayButton);
                        /*if (room != rTMM_ClearLobby){
                            instance_destroy(objStatsDisplay);
                        }*/
                        with (other){
                            scrRestartGame();
                        }
                        break;
                }
                audio_play_sound_nogroup(sndMakerMenuRelease, 0, 0);
            }
        }else{
            selected = false;
        }
        
        if (!mouse_check_button(mb_left)){
            clicked = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Title
if (room == rTitle || room == rMenu || room == rPracticeMenu){
    var _popupFocused = (instance_exists(objPopup) &amp;&amp; (objPopup.y &gt;= 120 || objPopup.move != -1));
    var _settingsFocused = (instance_exists(objSettingsMenu) &amp;&amp; (objSettingsMenu.y &lt;= 480 || objSettingsMenu.move != 1));
    var _statsFocused = (room != rTMM_ClearLobby &amp;&amp; instance_exists(objStatsDisplay) &amp;&amp; (objStatsDisplay.y &lt;= 480 || objStatsDisplay.move != 1));
    var _guiFocused = (_popupFocused || _settingsFocused || _statsFocused);
    if (room == rTitle){
        titleCounter ++;
        if (!_guiFocused){
            // Begin switching menus, if necessary
            var _pressingAny = (keyboard_check_pressed(vk_anykey) || scrAnyControllerButton()); // || mouse_check_button_pressed(mb_any));
            if (mouse_check_button_pressed(mb_any)){
                with (objMouseClickCheck){
                    if (!place_meeting(x, y, objTitleButton) &amp;&amp; !place_meeting(x, y, objSettingsButton)){  //not clicking on button
                        _pressingAny = true;
                    }
                }
            }
            
            if (titleToMenu == 0){
                if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace)){
                    if (_guiFocused){
                        with (objSettingsMenu){move = 1;}
                        with (objStatsDisplay){move = 1;}
                    }else if (titleCurMenu == 0){
                        var t_popup;
                        t_popup = instance_create(0, -80, objPopup);
                        t_popup.index = 0;
                    }else{
                        titleCurMenu = 0;  // skip transition
                    }
                }else if (_pressingAny){
                    titleToMenu = 1;
                    with (objTitleButton){
                        instance_destroy();
                    }
                    
                    // used to decide whether certain button sprites should be gray or white during the transition animation
                    scrLoadRecord();
                    titlePracticeUnlocked = (global.farthestRoomEver &gt;= scrGetRoomNum(rStage01Purify));
                    titleStatsToShow = ((global.gameClear || global.gameClearedEver) || !EMPTY_RECORD);
                }
            }else if (titleToMenu == 1){
                if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace)){
                    if (_guiFocused){
                        with (objSettingsMenu){move = 1;}
                        with (objStatsDisplay){move = 1;}
                    }else{
                        titleToMenu = 0;
                        with (objTitleButton){
                            instance_destroy();
                        }
                        
                        // used to decide whether certain button sprites should be gray or white during the transition animation
                        scrLoadRecord();
                        titlePracticeUnlocked = (global.farthestRoomEver &gt;= scrGetRoomNum(rStage01Purify));
                        titleStatsToShow = ((global.gameClear || global.gameClearedEver) || !EMPTY_RECORD);
                    }
                }else if (titleCurMenu &lt; 1 &amp;&amp; (_pressingAny)){
                    titleCurMenu = 1;  // skip transition
                }
            }
            
            // Handle menu transitions
            if (titleCurMenu &gt; titleToMenu){
                if (titleToMenu == 0 &amp;&amp; titleCurMenu &gt; 0){
                    titleCurMenu = max(titleCurMenu - 1/18, 0);
                }
            }else if (titleCurMenu &lt; titleToMenu){
                if (titleToMenu == 1 &amp;&amp; titleCurMenu &lt; 1){
                    titleCurMenu = min(titleCurMenu + 1/18, 1);
                }
            }else if (!_guiFocused){
                // Button behavior
                with (objTitleButton){
                    if (!invalid &amp;&amp; place_meeting(x, y, objMouseClickCheck)){
                        if (mouse_check_button_pressed(mb_left)){
                            clicked = true;
                            audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
                        }else if (!selected){
                            audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
                        }
                        selected = true;
                        
                        if (clicked &amp;&amp; mouse_check_button_released(mb_left)){
                            switch(index){
                                case 0: // Play
                                    global.savenum = subind;
                                    scrLoadGame(true);
                                    break;
                                case 1: // Options - UNUSED
                                    selected = 0;
                                    if (!instance_exists(objSettingsMenu)){
                                        instance_create(0, 608, objSettingsMenu);
                                    }else{
                                        objSettingsMenu.move = -1;
                                    }
                                    break;
                                case 2: // Practice
                                    event_user(0);  // ensure we are able to use practice mode
                                    if (!invalid){
                                        scrLoadGame(true);
                                    }else{
                                        audio_play_sound_nogroup(sndMakerMenuInvalid, 0, 0);
                                    }
                                    break;
                                case 3:  // Quit
                                    var t_popup;
                                    t_popup = instance_create(0, -80, objPopup);
                                    t_popup.index = 0;
                                    with (object_index){  // button states will be "stuck"
                                        selected = false;
                                        clicked = false;
                                    }
                                    break;
                                /*case 4:  // Pause menu - Unpause  (but this is the title screen - ???)
                                    with (other){
                                        event_user(1);
                                    }
                                    break;
                                case 5:  // Pause menu - Return to Load Game  (but this is the title screen - ???)
                                    scrRestartGame();
                                    break;*/
                                case 6:  // Stats display
                                    event_user(0);  // ensure we are able to create the display
                                    if (!invalid){
                                        if (!instance_exists(objStatsDisplay)){
                                            instance_create(400, 616, objStatsDisplay);
                                        }else{
                                            objStatsDisplay.move = -1;
                                        }
                                        with (object_index){  // button states will be "stuck"
                                            selected = false;
                                            clicked = false;
                                        }
                                    }else{
                                        audio_play_sound_nogroup(sndMakerMenuInvalid, 0, 0);
                                    }
                                    break;
                            }
                            audio_play_sound_nogroup(sndMakerMenuRelease, 0, 0);
                        }
                    }else{
                        selected = false;
                    }
                    
                    if (!mouse_check_button(mb_left)){
                        clicked = false;
                    }
                }
            }
            
            // replace missing buttons
            if (titleCurMenu &lt;= 0){
                if (!instance_exists(button[4])){
                    button[4] = instance_create(104, titleSmallButtonY, objTitleButton);  // Stats
                    button[4].index = 6;
                    with (button[4]){
                        event_user(1);
                    }
                    button[4].textSpr = sprMakerMenuTextSmall;
                    button[4].textInd = 0;
                }
                if (!instance_exists(button[5])){
                    button[5] = instance_create(696, titleSmallButtonY, objTitleButton);  // Quit Game
                    button[5].index = 3;
                    button[5].textSpr = sprMakerMenuTextSmall;
                    button[5].textInd = 1;
                }
            }else if (titleCurMenu &gt;= 1){
                var _totalSaves = 3;
                var _totalButtons = 4;
                for (var i=0; i&lt;_totalButtons; i++){
                    if (!instance_exists(button[i])){
                        button[i] = instance_create(625, 204 + 100*i, objTitleButton);
                        button[i].image_xscale = 2;
                        button[i].image_yscale = 2;
                        button[i].textSpr = sprMakerMenuTextBig;
                        button[i].textInd = i;
                        
                        if (i &lt; _totalSaves){
                            button[i].index = 0;
                            button[i].subind = (i+1);
                        }else{
                            button[i].index = 2;
                            with (button[i]){
                                event_user(0);
                            }
                        }
                    }
                }
            }
        }
    }else if (room == rMenu || room == rPracticeMenu){
        if (!_guiFocused &amp;&amp; (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace))){
            room_goto(rTitle);
            titleToMenu = 1;
            titleCurMenu = 0.99; //creates buttons
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug keys
if (global.debugMode &amp;&amp; (global.gameStarted || global.practicing) &amp;&amp; !global.gamePaused)
{
    if (keyboard_check(vk_tab))             //drags player with mouse
    {
        with (objPlayer)
        {
            x = mouse_x;
            y = mouse_y;
        }
        with (objMakerBubble)
        {
            x = mouse_x;
            y = mouse_y;
        }
    }
    if (keyboard_check_pressed(vk_backspace))   //toggles debug overlay
    {
        global.debugOverlay = !global.debugOverlay;
    }
    if (keyboard_check_pressed(vk_insert))  //saves game
    {
        with (objPlayer)
        {
            global.roomProgress[scrGetRoomNum(room)] = max(global.roomProgress[scrGetRoomNum(room)], 1);
            scrSaveGame(true);
            audio_play_sound(sndItem,0,false);
        }
    }
    if (keyboard_check_pressed(vk_delete))  //toggles showing the hitbox
    {
        global.debugShowHitbox = !global.debugShowHitbox;
    }
    if (keyboard_check_pressed(vk_home))    //toggles god mode
    {
        global.debugNoDeath = !global.debugNoDeath;
    }
    if (keyboard_check_pressed(vk_end))     //toggles infinite jump
    {
        global.debugInfJump = !global.debugInfJump;
    }
    
    //  Page Up / Page Down
    if (!global.practicing){  // Move between rooms
        if (keyboard_check_pressed(vk_pageup) &amp;&amp; room != room_last)  //goes to next room
        {        
            with (objPlayer)
                instance_destroy();
        
            room_goto_next();
        }
        if (keyboard_check_pressed(vk_pagedown) &amp;&amp; room != room_first)    //goes to previous room
        {
            with (objPlayer)
                instance_destroy();
            
            if (room_previous(room) != rStage03UndertalePractice){
                room_goto_previous();
            }else{
                room_goto(room_previous(rStage03UndertalePractice));  // skip over the Undertale practice room
            }
        }
    }else{  // Move between attacks or bosses
        //Note:  When using these debug keys, the game will only practice one attack at a time. You can not move a "chain"; it will only use the first "link"
        if (keyboard_check_pressed(vk_pageup) &amp;&amp; global.practiceWaypointStart &lt; (global.bossMarkers[global.practiceBoss] - 1))  //goes to next waypoint
        {
            global.practiceWaypointStart += 1;
            global.practiceWaypointEnd = (global.practiceWaypointStart+1);
            scrRestartScreen();
        }
        if (keyboard_check_pressed(vk_pagedown) &amp;&amp; global.practiceWaypointStart &gt; 0)    //goes to previous waypoint
        {
            global.practiceWaypointStart -= 1;
            global.practiceWaypointEnd = (global.practiceWaypointStart+1);
            scrRestartScreen();
        }
    }
}

if (global.debugVisuals)
{
    with (objPlayer)    //sets appearance of the player to show god mode/infinite jump
    {
        if (global.debugNoDeath || iframes &gt; 0)     //makes player slightly transparent when invincible
            image_alpha = 0.7;
        else
            image_alpha = 1;
        
        if (global.debugInfJump)     //makes player turn blue when infinite jump is on
            image_blend = c_blue;
        else
            image_blend = c_white;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unpause the game
global.gamePaused = false;  //set the game to unpaused
global.pauseDelay = global.pauseDelayLength;     //set pause delay

instance_destroy(objSettingsButton);
instance_destroy(objSettingsMenu);
//instance_destroy(objStatsDisplayButton);
/*if (room != rTMM_ClearLobby){
    instance_destroy(objStatsDisplay);
}*/
instance_destroy(objPopup);
instance_destroy(objTitleButton);

audio_sound_gain(global.currentMusic, 0.4 * (global.musicLevel/100 * global.volumeLevel/100) * global.musFadeMultiplier, 0);

instance_activate_all();    //reactivate objects

for(var i = 0; i &lt; 2; i++){
    if (instance_exists(button[i])){
        instance_destroy(button[i]);
    }
}

if (sprite_exists(global.pauseSprite)){
    sprite_delete(global.pauseSprite);         //free the pause screen
}
view_angle = prePauseVAngle;

//scrSaveConfig();    //save config in case volume levels were changed

io_clear(); //clear input states to prevent possible pause strats/exploits
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fade current music out
global.musicFading = true;
global.currentGain = audio_sound_get_gain(global.currentMusic);     //get current gain
audio_sound_gain(global.currentMusic, 0, 1000);                       //fade out music over 1 second

alarm[0] = 50;  //pause music when it's done fading
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///note which room we are leaving
audio_group_stop_all(RoomSounds);
roomPrevious = room;

//Reset variables
global.coinCount = 0;
if (!instance_exists(objMakerTeleTransition)){
    global.canRestart = true;
    global.canPause = true;
}
global.musicFadeInc = 1/20;
global.musicFadeDec = 1/40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///room checks
if (room == rInit){
   room_goto_next();
   exit;
}
if (room == rTitle){
    // used to decide whether certain button sprites should be gray or white during the transition animation
    scrLoadRecord();
    titlePracticeUnlocked = (global.farthestRoomEver &gt;= scrGetRoomNum(rStage01Purify));
    titleStatsToShow = (!EMPTY_RECORD || (global.gameClear || global.gameClearedEver));
}

if (fullRestart){
    scrFullRestart();
}

if (room != rGeezerHitchcock &amp;&amp; scrGetRoomNum(room) != scrGetRoomNum(rFinalBoss_1)){
    global.challengeMode = false;
}

alarm[0] = -1;
alarm[2] = -1;
alarm[3] = -1;
global.dead = false;
global.deathSlow = 1;
playMusic = true;
musicToPlay = noone;
global.shield = 0;
global.infJump = false;
global.musicFading = -1;
global.musicFadeEnd = "stop";
if (!global.muteMusic){
    if (audio_is_paused(global.currentMusic)){
        audio_resume_sound(global.currentMusic);
    }
    audio_sound_gain(global.currentMusic, 0.4 * (global.musicLevel/100 * global.volumeLevel/100) * global.musFadeMultiplier, 400);
}

room_speed = 50;    //make sure game is running at the correct frame rate
scrSetRoomCaption();    //make sure window caption stays updated

// create/replace persistent instances (if necessary)
if (!instance_exists(objMakerWaterCtrl)){instance_create(0, 0, objMakerWaterCtrl);}
if (!instance_exists(objBackgroundManager)){instance_create(0, 0, objBackgroundManager);}
if (!instance_exists(objDropShadows)){instance_create(0, 0, objDropShadows);}
if (!instance_exists(objTilesToSurf)){instance_create(0, 0, objTilesToSurf);}
if (!instance_exists(objBackTilesToSurf)){instance_create(0, 0, objBackTilesToSurf);}

// reset variables on each room start
global.dotkid = false;
global.playerV = false;
if (global.grav == -1){ scrFlipGrav(); }

with (objPlayer) scrSetPlayerMask();
// ADDED: walk the ceiling - remove invert controls if not upside down
if (global.grav == 1){
    global.invertControls = false;
}
if (room != rInit){
    ///Custom variables and functions
    if (room == rGeezerHitchcock){
        playIntro = false;
        playMusic = false;
    }
    
    bkXScrollAmt = 0;
    bkYScrollAmt = 0;
    if (background_index[0] == bkMakerSky){
        bkXScrollAmt = -1;
    }else if (room == rGeezer01 || room == rGeezerHitchcock){
        bkYScrollAmt = 1;
    }else if (room == rStage01Patrick || room == rStage02Abstr4ktNew){
        bkXScrollAmt = -0.425;
    }
    
    //Room Transition Specific
    if (roomPrevious != room){
        if (background_index[0] == bkMakerSky &amp;&amp; ((room == rStage01Dice &amp;&amp; roomPrevious == rStage01Abstr4ktNew) || (room == rStage01Kurath &amp;&amp; roomPrevious == rStage01Dice))){
            //don't reset bkXScroll + save offset
            bkXScroll = background_x[0];
        }else{
            bkXScroll = 0;
            bkYScroll = 0;
        }
        createMusicIdent = true;
        global.playerJumps = 2;
        global.playerPower = 0;
        global.playerScale = 1;
        switch(room){
            case rStage01Abstr4ktNew:
            case rStage01Kurath:
            case rStage01Zilily:
            case rStage01Patrick:
            case rStage01Ace:
            case rStage02Shark2:
            case rStage02Erik:
            case rStage02Telejump:
                scrIdentRoom(room);
                break;
            case rStage01Dice:
                instance_create(400, 304, objSingleJumpFlash);
                scrIdentRoom(room);
                global.playerJumps = 1;
                break;
            case rStage01Onetwentyeight:
                if (global.farthestRoom &gt; scrGetRoomNum(room) &amp;&amp; scrGetRoomNum(roomPrevious) == (scrGetRoomNum(room)-1)){  // min(global.QuadCoin[0], global.QuadCoin[1], global.QuadCoin[2], global.QuadCoin[3]) == 1
                    // fake "full restart"
                    for(var i=0; i&lt;=3; i++){
                        global.QuadCoin[i] = 0;
                        global.QuadCoin[i] = 0;
                    }
                    with (objS1_128ExpandBlock){
                        image_alpha = 0;
                        if (instance_exists(block)){
                            instance_destroy(block);
                            block = noone;
                        }
                    }
                    audio_play_sound(sndMakerRoomRestart, 0, 0);  // audio jungle
                }
                
                scrIdentRoom(room);
                break;
            case rStage02Shark1:
                if (global.playElevator){
                    with (objS2ElevatorExit){
                        animating = true;
                        alarm[2] = 120;
                        alarm[4] = 30;
                    }
                    var t_fade = instance_create(x, y, objScreenFade);
                    t_fade.alpha = 1;
                    t_fade.color = c_black;
                    t_fade.fade = 1;
                    t_fade.fadeOut = 0.04;
                    playMusic = false;
                    with (objPlayerStart){
                        instance_destroy();
                    }
                }else{
                    scrIdentRoom(room);
                    if (!instance_exists(objS2NANGCtrl)){
                        instance_create(0, 0, objS2NANGCtrl);
                    }
                }
                break;
            case rStage02Klamy:
                if (global.farthestRoom &gt; scrGetRoomNum(room) &amp;&amp; scrGetRoomNum(roomPrevious) == (scrGetRoomNum(room)-1)){
                    // fake "full restart" (does not overwrite save variables unless player saves in room)
                    global.klamySaves = global.klamyMax;
                    for(var i=0;i&lt;=global.klamyMax;i++;){
                        global.klamySaveCoord[i, 0] = -1;  // x
                        global.klamySaveCoord[i, 1] = -1;  // y
                    }
                    audio_play_sound(sndMakerRoomRestart, 0, 0);  // audio
                }
                scrIdentRoom(room);
                break;
            case rStage02Abstr4ktNew:
                scrIdentRoom(room);
                global.abstr4ktGrav = 0;
                break;
            case rStage02Vovka:
                scrIdentRoom(room);
                instance_create(400, 304, objSingleJumpFlash);
                global.playerJumps = 1;
                break;
            case rStage02Flappy:
                scrIdentRoom(room);
                global.flappyStarted = false;
                break;
            case rGeezerHitchcock:
                with (objHitchCtrl){
                    autosave = true;
                }
                break;
            case rStage03Hub:
                if (roomPrevious == rGeezerHitchcock){
                    global.autosave = global.refightAutosave;
                }
                break;
            case rStage03PvZ:
            case rStage03Touhou:
            case rStage03Undertale:
                if (!global.practicing){
                    playMusic = false;
                }
                break;
            case rStage04New_1:
                global.SRCoin[0] = 1;
                global.SRCoin[1] = 1;
                global.SRCoin[2] = 1;
                
                if (roomPrevious == rStage03Hub){
                    global.autosave = global.refightAutosave;
                }
                show_debug_message(string(scrGetRoomNum(roomPrevious)));
                show_debug_message(string(scrGetRoomNum(room)));
                show_debug_message(room_get_name(roomPrevious));
                break;
            case rStage04New_2:
                if (global.grav == -1){
                    scrFlipGrav();
                }
                global.playerJumps = 1;
                break;
            case rStage04New_3:
                global.abstr4ktGrav = 0;
                break;
            case rStage04New_4:
                global.flappyStarted = false;
                break;
            case rFinalBoss_1:
                if (roomPrevious == rStage04New_4){
                    instance_create(0, 0, objFinalBossCutscene);
                }
                break;
            case rTMM_ClearLobby:
                scrIdentRoom(rTMM_ClearLobby);
                break;
        }
        
        if (room != rStage04New_1 &amp;&amp; room != rStage04New_2 &amp;&amp; room != rStage04New_3 &amp;&amp; room != rStage04New_4){
            global.count = 0;
        }
    }
    if (!instance_exists(objMakerPlayerSize)){
        with (objPlayer){
            image_xscale = 1;
            image_yscale = 1;
        }
    }
    
    // Room-Specific
    // NANG Text
    if ((room == rStage1to2Transition || (room == rStage02Shark1 &amp;&amp; !global.playElevator) || room == rStage02Shark2 || room == rStage02Erik || room == rStage02Klamy || room == rStage02Abstr4ktNew || room == rStage02Vovka || room == rStage02Telejump || room == rStage02Flappy)){
        if (!instance_exists(objS2NANGCtrl) || objS2NANGCtrl.roomStart != room){
            with(objS2NANGCtrl){instance_destroy();}
            instance_create(0, 0, objS2NANGCtrl);
        }
    }
    // Rift visuals
    if (room == rStage04New_1 || room == rStage04New_2 || room == rStage04New_3 || room == rStage04New_4){
        if (!instance_exists(objS4NewDraw)){
            instance_create(0, 0, objS4NewDraw);
        }
    }
    // Stage 4 Challenge
    if (room == rStage04New_1 &amp;&amp; global.roomSaveTo &lt;= 1 &amp;&amp; ((instance_exists(objPlayer) &amp;&amp; objPlayer.x &lt; 192 &amp;&amp; objPlayer.y &lt; 128) || (!instance_exists(objPlayer)))){
        global.startedS4FromBeginning = true;
    }
    
    global.playElevator = false;  // rStage02Shark1
    
    switch(room){
        case rStage01Kurath:
            background_blend[0] = c_ltgray;
            break;
        case rStage01Onetwentyeight:
            for (var i=0; i&lt;=3; i++)
                global.QuadCoinAtStart[i] = global.QuadCoin[i];
            break;
        case rStage02Erik:
            with (objMiniBlock){
                visible = true;
                sprite_index = sprMakerMiniBlocks;
                image_index = 0;
                image_speed = 0;
            }
            break;
        case rStage1to2Transition:
            global.canRestart = false;
            break;
        case rStage02Shark2:
            with (objMiniBlock){
                visible = true;
                sprite_index = sprMakerMiniBlocks;
                image_index = 1;
                image_speed = 0;
            }
            break;
        case rStage02Klamy:
        case rStage04New_3:
            with (objMiniBlock){
                visible = true;
                sprite_index = sprMakerMiniBlocks;
                image_index = 2;
                image_speed = 0;
            }
            break;
        case rStage01Purify:
            if (!audio_is_playing(global.BGMStage1a)){
                musicToPlay = -1;
            }else{
                global.musicFading = global.currentMusic;
                global.musicFadeDec = 1/40;
                global.musicFadeEnd = "pause";
            }
            break;
        case rChaozB:
            if (!audio_is_playing(global.BGMStage1a)){
                musicToPlay = -1;
            }else{
                global.musicFading = global.currentMusic;
                global.musicFadeDec = 1/40;
                global.musicFadeEnd = "stop";
            }
            break;
        case rGeezer01:
            if (instance_exists(objGeezerCutscene)){
                with (objMakerBossSave){instance_destroy();}
            }
            with (objMakerIdent){
                if (music == global.BGMStage2b){
                    instance_destroy();  // needed because of music fade out
                }
            }
            if (!audio_is_playing(global.BGMStage2b) || audio_is_playing(global.BGMBoss2b)){
                musicToPlay = -1;
            }else{
                global.musicFading = global.currentMusic;
                global.musicFadeDec = 1/80;
                global.musicFadeEnd = "stop";
            }
            break;
        case rGeezerHitchcock:
            waterOffset = 0; //the water in the avoidance will always have the same bubble pattern - I think it looks better
            break;
        case rStage03Hub:
            //we don't need to create an identifier every time we die in one of the knockoffs
            if (global.saveRoom != room_get_name(room)){
                createMusicIdent = true;
            }else{
                createMusicIdent = false;
            }
            break;
        case rFinalBoss_1:
            if (!audio_is_playing(global.BGMStage4)){
                musicToPlay = -1;
            }else{
                global.musicFading = global.currentMusic;
                global.musicFadeDec = 1/40;
                global.musicFadeEnd = "stop";
            }
            createMusicIdent = true;
            with (objMakerIdent){
                if (!prefixText){
                    instance_destroy();
                }
            }
            break;
        case rFinalBoss_2:
            createMusicIdent = true;
            with (objMakerIdent){
                if (!prefixText){
                    instance_destroy();
                }
            }
            break;
        case rFinalBoss_3:
            createMusicIdent = true;
            with (objMakerIdent){
                if (!prefixText){
                    instance_destroy();
                }
            }
            break;
        case rFinalBoss_4:
            show_debug_message("roomSaveTo: " + string(global.roomSaveTo));
            createMusicIdent = true;
            with (objMakerIdent){
                if (!prefixText){
                    instance_destroy();
                }
            }
            break;
    }
    
    if (fadeIn == true){
        with (objPlayer){frozen = true;}
        global.canRestart = false;
        with (instance_create(view_xview, view_yview, objScreenFade)){
            color = c_black;
            alpha = 1;
            fade = 1;
            fadeOut = 0.035;
        }
    }
}

if (global.screenshotMode){
    bkXScroll = 0;
    bkYScroll = 0;
    bkXScrollAmt = 0;
    bkYScrollAmt = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Causes saves to be corrupted if the game is shut down suddenly
/*if (global.gameStarted)
    scrSaveGame(false);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize everything

//gml _ release_mode(true);
//Persistant Objects
instance_create(0, 0, objBetterBlockCtrl);

//initialize all variables
initialize_globals_fmns();
scrInitializeGlobals();
global.practPrevBoss = -1;
global.practPrevPhase = -1;
scrInitMusic();
// FMNS extension
scrInitializeFiles();
// load the current config file, sets default config if it doesn't exist
scrLoadConfig();

//Clicking
instance_create(0, 0, objMouseClickCheck);

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw debug overlay
if (room != rStage03PvZ){
    if (global.debugOverlay)
    {
        draw_set_color(c_black);
        draw_set_halign(fa_left);
        draw_set_font(fDefault12);
        
        var drawX = 0, drawY = 0, drawAlign = 0, pHspeed = 0, pVspeed = 0;
        if (instance_exists(objPlayer))
        {
            drawX = objPlayer.x;
            drawY = objPlayer.y;
            drawAlign = (objPlayer.x mod 3);
            pHspeed = objPlayer.hspeed;
            pVspeed = objPlayer.vspeed;
        }
        
        scrDrawTextOutline(20,20,"X: "+string(drawX),c_black,c_white);
        scrDrawTextOutline(20,40,"Y: "+string(drawY),c_black,c_white);
        scrDrawTextOutline(20,60,"Align: "+string(drawAlign),c_black,c_white);
        scrDrawTextOutline(20,80,"Room name: "+room_get_name(room),c_black,c_white);
        scrDrawTextOutline(20,100,"Room number: "+string(room),c_black,c_white);
        scrDrawTextOutline(20,120,"God mode: "+string(global.debugNoDeath),c_black,c_white);
        scrDrawTextOutline(20,140,"Infinite jump: "+string(global.debugInfJump),c_black,c_white);
        scrDrawTextOutline(20,160,"FPS: "+string(fps),c_black,c_white);
        scrDrawTextOutline(20,180,"Real FPS: "+string(fps_real),c_black,c_white);
        scrDrawTextOutline(20,200,"PHspeed: "+string(pHspeed),c_black,c_white);
        scrDrawTextOutline(20,220,"PVspeed: "+string(pVspeed),c_black,c_white);
        scrDrawTextOutline(20,240,"Instance Count: "+string(instance_count),c_black,c_white);
        scrDrawTextOutline(20,260,"Death Speed Mult: "+string(global.deathSlow),c_black,c_white);
        
        draw_set_color(c_white);
    }
}

if (global.screenshotMode xor global.debugNoDeath){
    draw_sprite(sprGodModeText, 0, 754, 50);
}


if (!global.screenshotMode &amp;&amp; global.debugMode){
    draw_set_font(fDefault12);
    draw_set_halign(fa_right);
    draw_set_valign(fa_top);
    //scrDrawTextOutline(780, 8, "Beta 0.95", c_white, c_black);
    
    if (global.challengeMode){
        scrDrawTextOutline(780, 36, "Challenge Mode", c_blue, c_black);
    }
    
    if (global.startedBossFromBeginning || global.startedS4FromBeginning){
        scrDrawTextOutline(780, 64, "Full Fight", c_yellow, c_black);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw pause screen

if (global.gamePaused)  //check if game is paused to draw the pause screen
{
    draw_clear(c_black);
    
    if (sprite_exists(global.pauseSprite)){       //check if surface exists before drawing it
        draw_sprite_ext(global.pauseSprite, 0, view_xview, view_yview, view_wview/800, view_hview/608, 0, c_white, 1);
    }
    draw_set_color(c_black);
    draw_set_alpha(0.4);
    
    draw_rectangle(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, false);    //darken the paused screen
    
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(fFlappyCounter);
    draw_text_outline(view_xview + view_wview/2, view_yview + (192 * view_hview/608), "Paused", 3, c_black, 24);
    
    // Draw GUI elements
    with (objTitleButton){
        event_perform(ev_draw, 0);
    }
    with (objSettingsButton){
        draw_self();
    }
    with (objSettingsMenu){
        event_perform(ev_draw, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Title Screen
if (room == rTitle){
    //BEGIN TITLE TEXT//
    var _blueRate = 2*pi/340;
    var _yellowRate = 2*pi/480;
    var _blueCounter = titleCounter*_blueRate;
    var _yellowCounter = titleCounter*_yellowRate;
    
    //Draw text
    scrTMMGenTitle(1, titleCounter, 160, 172, 6 + 2.5*sin(_blueCounter), "THE", 408, 398, 3 + 1.75*sin(_blueCounter + 3*pi/5), "MEDLEY", 329, 291, 2.5*sin(_yellowCounter + 3*pi/5), "M  KER");
    var _scale = lerp(1, 0.7, min(titleCurMenu, 1));
    scrTMMDrawTitle(lerp(462, 264, min(titleCurMenu, 1)), 304, _scale, _scale);
    // END TITLE TEXT //
    // This looks a little silly after consolidating the vast majority of the code into those two scripts  :P
    
    if (titleCurMenu &gt; 0){
        var _practiceArrPos = 3;
        var _totalButtons = 4;
        
        // GMS1 arrays
        tempButtonIndex[(_totalButtons-1)] = 0;
        
        for (var i=0; i &lt; _totalButtons; i++){
            with (button[i]){
                if (selected){
                    if (clicked){
                        other.tempButtonIndex[i] = 2;
                    }else{
                        other.tempButtonIndex[i] = 1;
                    }
                }else{
                    other.tempButtonIndex[i] = 0;
                }
            }
        }
        
        for (var i=0; i&lt;_practiceArrPos; i++;){
            draw_sprite_ext(sprMakerGUIButtonBig, tempButtonIndex[i], 929 - 304*titleCurMenu, 204 + 100*i, 1, 1, 0, c_white, 1.43*titleCurMenu - 0.3);
            draw_sprite_ext(sprMakerMenuTextBig, i, 929 - 304*titleCurMenu, 204 + 100*i + 2, 1, 1, 0, c_white, 1.43*titleCurMenu - 0.3);
        }
        
        // color the practice button if it is (or will be) invalid
        var _practiceBlend = c_white;
        if (instance_exists(button[_practiceArrPos]) &amp;&amp; button[_practiceArrPos].invalid){
            _practiceBlend = c_gray
        }else if (!titlePracticeUnlocked){
            _practiceBlend = c_gray;
        }
        draw_sprite_ext(sprMakerGUIButtonBig, tempButtonIndex[_practiceArrPos], 929 - 304*titleCurMenu, 204 + 100*_practiceArrPos, 1, 1, 0, _practiceBlend, 1.43*titleCurMenu - 0.3);
        draw_sprite_ext(sprMakerMenuTextBig, _practiceArrPos, 929 - 304*titleCurMenu, 204 + 100*i, 1, 1, 0, _practiceBlend, 1.43*titleCurMenu - 0.3);
    }
    
    if (titleCurMenu &lt; 1){
        var _statsArrPos = 4;
        var _statsSubimg = 0;
        var _quitArrPos = 5;
        var _quitSubimg = 0;
        
        // Get button states
        with (button[_statsArrPos]){
            if (invalid){
                _statsSubimg = 0;
            }
            if (selected){
                if (clicked){
                    _statsSubimg = 2;
                }else{
                    _statsSubimg = 1;
                }
            }else{
                _statsSubimg = 0;
            }
        }
        
        with (button[_quitArrPos]){
            if (selected){
                if (clicked){
                    _quitSubimg = 2;
                }else{
                    _quitSubimg = 1;
                }
            }else{
                _quitSubimg = 0;
            }
        }
        
        // color the stats button if it is (or will be) invalid
        var _statsBlend = c_white;
        if (instance_exists(button[_statsArrPos]) &amp;&amp; button[_statsArrPos].invalid){
            _statsBlend = c_gray
        }else if (!titleStatsToShow){
            _statsBlend = c_gray;
        }
        
        // Draw buttons and text
        draw_sprite_ext(sprMakerGUIButton, _statsSubimg, -200 + 304*(1-titleCurMenu), titleSmallButtonY, 1, 1, 0, _statsBlend, 1.6*(1-titleCurMenu) - 0.6);
        draw_sprite_ext(sprMakerMenuTextSmall, 0, -200 + 304*(1-titleCurMenu), titleSmallButtonY, 1, 1, 0, _statsBlend, 1.6*(1-titleCurMenu) - 0.6);
        draw_sprite_ext(sprMakerGUIButton, _quitSubimg, 1000 - 304*(1-titleCurMenu), titleSmallButtonY, 1, 1, 0, c_white, 1.6*(1-titleCurMenu) - 0.6);
        draw_sprite_ext(sprMakerMenuTextSmall, 1, 1000 - 304*(1-titleCurMenu), titleSmallButtonY, 1, 1, 0, c_white, 1.6*(1-titleCurMenu) - 0.6);
        draw_set_alpha(1);
    }
    
    if (titleCurMenu == 0 &amp;&amp; titleCounter mod 100 &lt; 50){
        draw_set_font(fDefault24);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_outline(400, 528, "Press Any Key", 4, c_black, 16);
    }
}

// title/level-select/practice screens
if (!global.gameStarted &amp;&amp; !global.practicing){
    with (objSettingsButton){
        draw_self();
    }
    with (objSettingsMenu){
        event_perform(ev_draw, 0);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
