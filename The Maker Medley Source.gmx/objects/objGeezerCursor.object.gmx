<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGeezerCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprGeezerCursor_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pickedUp = false;
playerRad = -1;
//playerAngle = 0;
pointAngle = 0;
image_xscale = 8;
image_yscale = 8;
targetGeezer = true;
//only if targetGeezer == false
drawPX = 0;
drawPY = 0;
drawPFrame = 0;
drawPScale = 1;
delay = -1;

timer = 0;
hitchBGM = -4;
hitchBGMTimer = 0;
hitchBGMStarted = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(global.BGMBoss2b);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 20;
event_perform(ev_alarm, 0);
if (!global.muteSFX){
    audio_play_sound_nogroup(sndMakerSampleThrowPersistent, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.practicing &amp;&amp; global.practiceWaypointEnd == 2){
    scrPracticeEnd();
}else{
    global.hitchAutostart = true;
    global.hitchTransitionTime = hitchBGMTimer + (0.5);  // clamped in objHitchCtrl Create Event
    room_goto(rGeezerHitchcock);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hitchcock BGM
global.currentMusicID = -4;
hitchBGM = scrPlayMusic(global.BGMBoss2b, 0, true);
hitchBGMTimer = 0;
hitchBGMStarted = true;
global.currentMusic = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dash Trail
t_fade = instance_create(x, y, objExpandFade);
t_fade.sprite_index = sprGeezerCursor;
t_fade.image_angle = image_angle;
t_fade.image_alpha = 0.6;
t_fade.image_xscale = 8;
t_fade.image_yscale = 8;
t_fade.alphaInc = -0.045;
t_fade.scaleInc = 0;

alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!pickedUp &amp;&amp; instance_exists(objPlayer)){
    if (targetGeezer) t_speed = 2.34;
    else t_speed = 20;
    move_towards_point(objPlayer.x, objPlayer.y, t_speed);
    pointAngle = direction;
    image_angle = pointAngle - 125;
    if (place_meeting(x, y, objPlayer)){
        pickedUp = true;
        if (!targetGeezer){
            direction = 270;
            alarm[3] = 50;
        }
        speed = 0;
        playerRad = point_distance(x, y, objPlayer.x, objPlayer.y);
        drawPX = objPlayer.x;
        drawPY = objPlayer.y;
        drawPScale = objPlayer.xScale;
        with (objPlayer) instance_destroy();
        audio_play_sound(sndGeezerCursorClick, 0, 0);
    }
}else if (pickedUp){
    if (targetGeezer){
        if (pointAngle != 90){
            if (pointAngle &lt;= 270 &amp;&amp; pointAngle &gt;= 90){
                pointAngle -= 7;
                if (pointAngle &lt; 90) pointAngle = 90;
            }else{ //pointAngle &gt; 270
                pointAngle += 7;
                if ((pointAngle mod 360) &gt; 90 &amp;&amp; (pointAngle mod 360) &lt; 135) pointAngle = 90; //360 + 90 = 450
            }
            image_angle = pointAngle - 125;
        }
        if (pointAngle == 90){
            var _riseAmt;
            if (buff()){
                if (room == rGeezerHitchcock){
                    _riseAmt = 1.75;
                }else{
                    _riseAmt = 1.5;
                }
            }else{
                if (room == rGeezerHitchcock){
                    _riseAmt = 1.5;
                }else{
                    _riseAmt = 1.25;
                }
            }
            
            y -= _riseAmt;
            if (drawPY - _riseAmt &lt;= 64 + 12){ //64 = laser y; 12 = player.y origin - player bbox_top
                instance_create(drawPX, drawPY, objPlayer);
                with(objPlayer){
                    alarm[0] = -1;
                    alarm[1] = -1;
                }
                scrKillPlayer();
                pickedUp = false;
            }
        }
        if (scrButtonCheckPressed(global.leftButton)) drawPScale = -1;
        if (scrButtonCheckPressed(global.rightButton)) drawPScale = 1;
        if (scrButtonCheckPressed(global.shootButton)){
            with (instance_create(drawPX, drawPY, objBullet)){
                bulletDir = other.drawPScale;
                image_xscale = bulletDir;
                hspeed = bulletDir*16;
                x += hspeed;
            }
        }
        
    }else{
        if (pointAngle != direction &amp;&amp; speed != 0){
            if (angle_difference(pointAngle, (direction - 180) mod 360) &lt; 0){
                pointAngle -= 7;
                if (angle_difference(pointAngle, (direction - 180) mod 360) &gt; 0) pointAngle = direction; //wrapped around
            }else{ //angle_difference is positive (or 0)
                pointAngle += 7;
                if (angle_difference(pointAngle, (direction - 180) mod 360) &lt; 0) pointAngle = direction; //wrapped around
            }
            image_angle = pointAngle - 125;
        }
        if (bbox_top &gt; 670){
            alarm[1] = 14;
            alarm[2] = 123; //14 + 111 -&gt; ~2.22*50
            pickedUp = false; //prevent alarm from being set again
            with (instance_create(x, y, objScreenFade)){
                alpha = -0.4;
                fadeIn = 0.03;
                color = c_black;
            }
        }
    }
    drawPX = x + playerRad*dcos(pointAngle);
    drawPY = y - playerRad*dsin(pointAngle);
    drawPFrame += 0.5;
}else if (targetGeezer){ //player is dead
    image_alpha -= 0.04;
    if (image_alpha &lt;= 0) instance_destroy();
}

// keep track of Hitchcock BGM
if (!targetGeezer &amp;&amp; hitchBGMStarted){
    var _inc = 0.5;  // needed for old avoidance system
    hitchBGMTimer += 1/2;
    if (audio_is_playing(hitchBGM) &gt;= 0 &amp;&amp; hitchBGMTimer &gt;= 0 &amp;&amp; abs(audio_sound_get_track_position(hitchBGM) - (hitchBGMTimer-_inc)/(50*_inc)) &gt; 0.08){
        audio_sound_set_track_position(hitchBGM, (timer-_inc)/(50*_inc));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dissolve
/*if (file_exists(working_directory + "\geezerCursorPart.txt")) file_delete(working_directory + "\geezerCursorPart.txt");
file = file_text_open_append(working_directory + "\geezerCursorPart.txt");
with (objGeezerCursorPart){
    file_text_write_string(other.file, "instance_create(x + lengthdir_x(" + string(point_distance(other.x, other.y, x, y)) + ", " + string(point_direction(other.x, other.y, x, y)) + " + image_angle), y + lengthdir_y(" + string(point_distance(other.x, other.y, x, y)) + ", " + string(point_direction(other.x, other.y, x, y)) + " + image_angle), objGeezerCursorPart);");
    file_text_writeln(other.file);
}
file_text_close(file);
*/

instance_create(x, y, objGeezerCursorPart);
instance_create(x + lengthdir_x(44.94, 252.78 + image_angle), y + lengthdir_y(44.94, 252.78 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(36.20, 252.15 + image_angle), y + lengthdir_y(36.20, 252.15 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(27.51, 271.34 + image_angle), y + lengthdir_y(27.51, 271.34 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(54.23, 247.44 + image_angle), y + lengthdir_y(54.23, 247.44 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(39.03, 233.44 + image_angle), y + lengthdir_y(39.03, 233.44 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(10.63, 277.74 + image_angle), y + lengthdir_y(10.63, 277.74 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(20.32, 236.11 + image_angle), y + lengthdir_y(20.32, 236.11 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(64.63, 237.34 + image_angle), y + lengthdir_y(64.63, 237.34 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(51.98, 227.14 + image_angle), y + lengthdir_y(51.98, 227.14 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(31.97, 329.65 + image_angle), y + lengthdir_y(31.97, 329.65 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(23.10, 302.46 + image_angle), y + lengthdir_y(23.10, 302.46 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(12.54, 338.15 + image_angle), y + lengthdir_y(12.54, 338.15 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(58.23, 295.36 + image_angle), y + lengthdir_y(58.23, 295.36 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(52.62, 281.00 + image_angle), y + lengthdir_y(52.62, 281.00 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(36.12, 288.62 + image_angle), y + lengthdir_y(36.12, 288.62 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(73.66, 292.14 + image_angle), y + lengthdir_y(73.66, 292.14 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(73.73, 293.76 + image_angle), y + lengthdir_y(73.73, 293.76 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(69.54, 283.04 + image_angle), y + lengthdir_y(69.54, 283.04 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(27.30, 211.77 + image_angle), y + lengthdir_y(27.30, 211.77 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(40.03, 212.58 + image_angle), y + lengthdir_y(40.03, 212.58 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(8.09, 84.70 + image_angle), y + lengthdir_y(8.09, 84.70 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(8.83, 168.92 + image_angle), y + lengthdir_y(8.83, 168.92 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(22.56, 179.49 + image_angle), y + lengthdir_y(22.56, 179.49 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(33.55, 184.39 + image_angle), y + lengthdir_y(33.55, 184.39 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(52.54, 338.54 + image_angle), y + lengthdir_y(52.54, 338.54 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(38.22, 349.65 + image_angle), y + lengthdir_y(38.22, 349.65 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(25.68, 8.40 + image_angle), y + lengthdir_y(25.68, 8.40 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(19.85, 49.90 + image_angle), y + lengthdir_y(19.85, 49.90 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(26.74, 85.15 + image_angle), y + lengthdir_y(26.74, 85.15 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(19.86, 120.97 + image_angle), y + lengthdir_y(19.86, 120.97 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(38.85, 105.09 + image_angle), y + lengthdir_y(38.85, 105.09 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(27.57, 143.10 + image_angle), y + lengthdir_y(27.57, 143.10 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(40.06, 123.40 + image_angle), y + lengthdir_y(40.06, 123.40 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(53.53, 113.79 + image_angle), y + lengthdir_y(53.53, 113.79 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(36.98, 159.36 + image_angle), y + lengthdir_y(36.98, 159.36 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(45.41, 141.10 + image_angle), y + lengthdir_y(45.41, 141.10 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(56.36, 126.03 + image_angle), y + lengthdir_y(56.36, 126.03 + image_angle), objGeezerCursorPart);
instance_create(x + lengthdir_x(70.10, 119.85 + image_angle), y + lengthdir_y(70.10, 119.85 + image_angle), objGeezerCursorPart);

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(global.BGMBoss2b);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (pickedUp){
    draw_sprite_ext(sprPlayerFall, drawPFrame, drawPX, drawPY, drawPScale, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
