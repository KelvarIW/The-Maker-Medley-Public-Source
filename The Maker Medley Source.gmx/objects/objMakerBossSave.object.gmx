<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerSave</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>12</depth>
  <persistent>0</persistent>
  <parentName>objSave</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create buffed save
if (object_index != objMakerBossSaveHard &amp;&amp; canBuff()){  // buffed saves shouldn't create another buffed save
    var _buffedSave = false;  // whether to try to create a buffed save (more conditions will be checked if this is true)
    if (scrGetRoomNum(room) != scrGetRoomNum(rFinalBoss_1) &amp;&amp; room != rGeezerHitchcock){  // all saves have buffed versions
        _buffedSave = true;
    }else if (scrGetRoomNum(room) == scrGetRoomNum(rFinalBoss_1)){
        var _buffCheck = saveID;
        //show_debug_message("original saveID: " + string(saveID));
        if (saveID == 5){
            _buffCheck = 999;  // 5 = Sudnep; not in buffed mode
        }else if (saveID &gt; 5){
            _buffCheck -= 1;
        }
        _buffedSave = (max(_buffCheck, 1) &lt;= max(global.finalBossBuffCheckpoint, 1) || global.scribbleHardCompleted);
        /*show_debug_message("_buffCheck: " + string(_buffCheck));
        show_debug_message("global.finalBossBuffCheckpoint: " + string(global.finalBossBuffCheckpoint));
        show_debug_message("global.scribbleHardCompleted: " + string(global.scribbleHardCompleted));*/
    }
    
    if (_buffedSave){
        if (!global.practicing){
            var _spacing = 64;
            var _inst = instance_create(x + _spacing, y, objMakerBossSaveHard);
            _inst.saveID = saveID;
            with (_inst){event_user(2);}
            x -= _spacing;
        }
    }
}
alarm[1] = -1;  // in case this code is called with event_perform
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Effect from being shot
if (instance_exists(objPlayer) || (room == rFinalBoss_3 &amp;&amp; instance_exists(objFinalP3Player))){
    if (!global.practicing &amp;&amp; object_index == objMakerBossSaveHard){
        global.challengeMode = true;
    }
    
    switch(room){
        case rStage01Purify:
            with (objBeelzebubCtrl) active = true;
            if (global.challengeMode || (global.practicing &amp;&amp; global.practiceModeBuffed)){
                scrGiveShields(2);
            }else{
                scrGiveShields(3);
            }
            global.musFading = true;
            break;
        case rChaozB:
            with (objChaozCtrl){active = true;}
            scrGiveShields(3);
            if (!global.practicing || global.practiceWaypointStart == 0){
                with (instance_create(objPlayer.x, objPlayer.y - 18, objMakerMessage)){
                    message = "You can shoot the first#bouncing cherries";
                }
            }
            break;
        case rGeezer01:
            if (!global.practicing){
                global.startedBossFromBeginning = true;
            }
            with (instance_create(836, 192, objGeezerVirus)){
                circleDir = 810;
                hspeed = -8;
            }
            with (objWorld){
                playIntro = true;
                playMusic = true;
                musicToPlay = global.BGMBoss2a;
                createMusicIdent = true;
            }
            break;
        case rGeezerHitchcock:
            if (!global.practicing || global.practiceWaypointStart &lt; 4){
                with (objHitchCtrl){
                    active = true;
                    if (global.practicing)
                        event_user(0);
                    if (!global.practicing || global.practiceWaypointStart == 2){
                        with (instance_create(0, 0, objScreenFade)){
                            color = c_black;
                            alpha = 1;
                            fadeOut = 0;
                            fade = -1;
                        }
                    }else if (global.practiceWaypointStart == 3){
                        timer = 548.5;
                        initialTimer = timer;
                        createIdent = true;
                        
                        with (instance_create(view_xview, view_yview, objScreenFade)){
                            alpha = 1;
                            fade = 0;
                            fadeIn = 0;
                            fadeOut = 0;
                            color = c_black;
                        }
                        var _inst = instance_create(400, 2432, objHitchArrow);
                        _inst.ySine = pi/2 - 0.01;
                        _inst = instance_create(64, 2432, objHitchWater);
                        _inst.y += _inst.vspeed * _inst.alarm[0];
                        _inst.vspeed = 0;
                        _inst.alarm[0] = -1;
                    }
                }
            }else{
                with (objGeezerSurvival){
                    event_user(0);
                }
            }
            break;
        case rFinalBoss_1:
            if (!global.practicing){
                global.startedBossFromBeginning = true;
            }
        case rFinalBoss_2:
        case rFinalBoss_3:
        case rFinalBoss_4:
            instance_create(view_xview + 400, view_yview - 120, objFinalBossCtrl);
            
            if (global.practicing){
                if (!buff()){
                    global.finalBossHPPracticeTemp = global.finalBossHPMax;
                }else{
                    global.finalBossHPPracticeTemp = global.finalBossBuffHPMax;
                }
                with (objFinalPracticeOptions){ //P1 devs and P4
                    fadeout = true;
                }
            }
            break;
    }
    
    global.currentMusicID = -1;
    createMusicIdent = true;
    
    // Fadeout object
    if (room != rFinalBoss_3){
        if (global.practicing){
            if (global.practiceModeBuffed){
                image_index = 20;
            }else{
                image_index = 10;
            }
        }else{
            if (object_index == objMakerBossSaveHard){
                image_index = 17;
            }else{
                image_index = 7;
            }
        }
    }else{
        if (global.practicing){
            if (global.practiceModeBuffed){
                image_index = 24;
            }else{
                image_index = 14;
            }
        }else{
            if (object_index == objMakerBossSaveHard){
                image_index = 22;
            }else{
                image_index = 12;
            }
        }
    }
    
    if (!global.screenshotMode){
        with (instance_create(x, y, objExpandFade)){
            sprite_index = sprMakerSave;
            image_index = other.image_index;
            depth = other.depth;
            if (other.disabledAlpha &gt; 0){
                image_blend = merge_color(c_white, c_gray, other.disabledAlpha);
            }
            alphaInc = -0.06;
            scaleInc = 0.18;
        }
        with (objMakerBossSave){ //we don't want the player to be able to start the boss again from a different save point.
            if (id != other){    // the save that was shot has a different expanding animation
                with (instance_create(x, y, objExpandFade)){
                    sprite_index = sprMakerSave;
                    image_index = other.image_index;
                    depth = other.depth;
                    if (other.disabledAlpha &gt; 0){
                        image_blend = merge_color(c_white, c_gray, other.disabledAlpha);
                    }
                    alphaInc = -0.06;
                }
            }
            instance_destroy(); //destroy all boss saves (including ourselves) instantly
        }
    }else{
        with (objMakerBossSave){
            instance_destroy(); //destroy all boss saves (including ourselves) instantly
        }
    }
}else{
    canSave = true; //save index will return to normal
}

//show_debug_message("farthest room ever: " + string(global.farthestRoomEver) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
